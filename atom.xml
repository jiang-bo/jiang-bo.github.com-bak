<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[非纯种程序猿]]></title>
  <link href="http://jiangbo.me/atom.xml" rel="self"/>
  <link href="http://jiangbo.me/"/>
  <updated>2012-08-31T19:54:58+08:00</updated>
  <id>http://jiangbo.me/</id>
  <author>
    <name><![CDATA[jiang-bo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于Memcache内存管理模型的理解]]></title>
    <link href="http://jiangbo.me/blog/2012/08/31/something-about-memcache-internal/"/>
    <updated>2012-08-31T07:52:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/08/31/something-about-memcache-internal</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="504049be5ec53c000202daa6" data-ratio="1.299492385786802" src="http://jiangbo.me//speakerdeck.com/assets/embed.js"></script>


<h2>说在前面</h2>

<p>本文不包含为什么使用memcache，以及如何使用memcache等基础知识。相关知识请查阅各类手册。
另，为便于理解，最好手头准备一份memcache的源码，本文使用的是目前最新的1.4.4版本源码，可自行到github上clone。</p>

<h2>Item、Chunk、Page、Slab</h2>

<h3>Data Item</h3>

<pre><code>+---------------------------------------+
|  key-value | cas | suffix | item head |  
+---------------------------------------+
</code></pre>

<p>Item指实际存放到memcache中的数据对象结构，除key-value数据外，还包括memcache自身对数据对象的描述信息（Item=key+value+后缀长+32byte结构体）</p>

<h3>Chunk</h3>

<p>Chunk指Memcache用来存放Data Item的最小单元，同一个Slab中的chunk大小是固定的。</p>

<pre><code>+------------------------------+
|   data item    | empty space |
+------------------------------+
</code></pre>

<h2>Page</h2>

<pre><code>+-------------------------------------+
|  chunk1 | chunk2 | chunk3 | chunk4  |
+-------------------------------------+
</code></pre>

<p>每个Slab中按照Page来申请内存，Page的大小默认为1M，可以通过-l参数调整，最小1k，最大128m.</p>

<h3>Slab</h3>

<pre><code>+--------------------------------+
|  Page1 | Page2 | Page3 | Page4 |
+--------------------------------+
</code></pre>

<p>Memcache将分配给它的内存（-m 参数指定，默认64m）按照Chunk大小不同，划分为多个slab。</p>

<p>他们三者的关系如下图所示:</p>

<pre><code>                 Chunk
                   ^                                                         
+------------------|------------------------------------------------------------+
|   Memory         |                                                            | 
|  +---------------|---------------------------------------------------------+  |
|  |      +--------|---------------------+  +------------------------------+ |  |
|  |      |Page1 +-|---+ +-----+ +-----+ |  |Page2 +-----+ +-----+ +-----+ | |  |
|  | Slab |(1M)  | 96B | | 68B | | 72B | |  |(1M)  | 92B | | 76B | | 84B | | |  | 
|  |  1   |      +-----+ +-----+ +-----+ |  |      +-----+ +-----+ +-----+ | |  |
|  |      +------------------------------+  +------------------------------+ |  |
|  +-------------------------------------------------------------------------+  |
|                                                                               |
|  +-------------------------------------------------------------------------+  |
|  |      +------------------------------+  +------------------------------+ |  |
|  |      |Page1 +------+    +------+    |  |Page2 +------+    +-------+   | |  |
|  | Slab | (1M) | 128B |    | 120B |    |  |(1M)  | 128B |    | 97B   |   | |  |
|  |   2  |      +------+    +------+    |  |      +------+    +-------+   | |  |
|  |      +------------------------------+  +------------------------------+ |  |
|  +-------------------------------------------------------------------------+  |
+-------------------------------------------------------------------------------+
</code></pre>

<h2>Slab内存分配</h2>

<h3>slab初始化</h3>

<p>Memcache启动时会进行slab初始化（参见slabs.c中slabs_init()函数），默认最小的chunksize为80（查看源码会发现settings中chunk_size默认为48，但是实际还需要加上一个32bytes的item结构体），可以通过-n参数调整，按照然后按照factor（默认为1.25，可以通过-f参数调整）(<em>关于参数更多的memcache默认参数可以参考memcache.c中settings的设置</em>)比例递增，划分出多个不同chunk大小的slab空间，即slab1的chunk大小=80，slab2的chunk大小为80*1.25=100，slab3的chunk大小为80*1.25*1.25=125，但最大一个一个chunk不会大于一个Page的大小（默认1M）。</p>

<pre><code>一下代码节选自 slabs.c
 95 void slabs_init(const size_t limit, const double factor, const bool prealloc) {
 96     int i = POWER_SMALLEST - 1;
 97     unsigned int size = sizeof(item) + settings.chunk_size;
 98  
 99     mem_limit = limit;
100  
101     if (prealloc) {
102         /* Allocate everything in a big chunk with malloc */
103         mem_base = malloc(mem_limit);
104         if (mem_base != NULL) {
105             mem_current = mem_base;
106             mem_avail = mem_limit;
107         } else {
108             fprintf(stderr, "Warning: Failed to allocate requested memory in"
109                     " one large chunk.\nWill allocate in smaller chunks\n");
110         }
111     }
112  
113     memset(slabclass, 0, sizeof(slabclass));
114  
115     while (++i &lt; POWER_LARGEST &amp;&amp; size &lt;= settings.item_size_max / factor) {
116         /* Make sure items are always n-byte aligned */
117         if (size % CHUNK_ALIGN_BYTES)
118             size += CHUNK_ALIGN_BYTES - (size % CHUNK_ALIGN_BYTES);
119  
120         slabclass[i].size = size;
121         slabclass[i].perslab = settings.item_size_max / slabclass[i].size;
122         size *= factor;
123         if (settings.verbose &gt; 1) {
124             fprintf(stderr, "slab class %3d: chunk size %9u perslab %7u\n",
125                     i, slabclass[i].size, slabclass[i].perslab);
126         }
127     }
128  
129     power_largest = i;
130     slabclass[power_largest].size = settings.item_size_max;
131     slabclass[power_largest].perslab = 1;
132     if (settings.verbose &gt; 1) {
133         fprintf(stderr, "slab class %3d: chunk size %9u perslab %7u\n",
134                 i, slabclass[i].size, slabclass[i].perslab);
135     }
136  
137     /* for the test suite:  faking of how much we've already malloc'd */
138     {
139         char *t_initial_malloc = getenv("T_MEMD_INITIAL_MALLOC");
140         if (t_initial_malloc) {
141             mem_malloced = (size_t)atol(t_initial_malloc);
142         }
143  
144     }
145  
146     if (prealloc) {
147         slabs_preallocate(power_largest);
148     }
149 }                             
</code></pre>

<p>PS：prealloc指的是直接申请一个大的chunk存放所有数据，默认是不采用这种方式的。</p>

<h3>数据存储过程</h3>

<p>一个数据项的大致存储量过程可以理解为（完整代码较长，不在粘贴，具体可参见items.c中do_item_alloc()方法）：</p>

<ol>
<li>构造一个数据项结构体，计算数据项的大小，（假设默认配置下，数据项大小为102B）</li>
<li>根据数据项的大小，找到最合适的slab，（100&lt;102&lt;125，所以存储在slab3中）</li>
<li>检查该slab中是否有过期的数据，如有清理掉</li>
<li>如果没有过期的数据项，则从当前slab中申请空间，参见slabs.c中slab_alloc()方法。</li>
<li>如果当前slab中申请失败，则尝试根据LRU算法逐出一个数据项，默认memcache是允许逐出的，如果被设置为禁止逐出，那么这是会反生悲剧的oom了</li>
<li>获取到item空间后将数据存储到改空间中，并追加到该slab的item列表中</li>
</ol>


<p>一个slab的申请一个chunk空间的过程大致如下（以下代码节选自slabs.c）：</p>

<pre><code>195 static int do_slabs_newslab(const unsigned int id) { 
196     slabclass_t *p = &amp;slabclass[id];
197     int len = settings.slab_reassign ? settings.item_size_max
198         : p-&gt;size * p-&gt;perslab;
199     char *ptr;             
200            
201     if ((mem_limit &amp;&amp; mem_malloced + len &gt; mem_limit &amp;&amp; p-&gt;slabs &gt; 0) ||
202         (grow_slab_list(id) == 0) ||    
203         ((ptr = memory_allocate((size_t)len)) == 0)) {
204            
205         MEMCACHED_SLABS_SLABCLASS_ALLOCATE_FAILED(id);
206         return 0;          
207     }      
208            
209     memset(ptr, 0, (size_t)len);    
210     split_slab_page_into_freelist(ptr, id);
211            
212     p-&gt;slab_list[p-&gt;slabs++] = ptr; 
213     mem_malloced += len;   
214     MEMCACHED_SLABS_SLABCLASS_ALLOCATE(id);
215            
216     return 1;              
217 }
218  
219 /*@null@*/ 
220 static void *do_slabs_alloc(const size_t size, unsigned int id) {
221     slabclass_t *p;        
222     void *ret = NULL;      
223     item *it = NULL;       
224  
225     if (id &lt; POWER_SMALLEST || id &gt; power_largest) {
226         MEMCACHED_SLABS_ALLOCATE_FAILED(size, 0);
227         return NULL;
228     }
229  
230     p = &amp;slabclass[id];
231     assert(p-&gt;sl_curr == 0 || ((item *)p-&gt;slots)-&gt;slabs_clsid == 0);
232  
233     /* fail unless we have space at the end of a recently allocated page,
234        we have something on our freelist, or we could allocate a new page */
235     if (! (p-&gt;sl_curr != 0 || do_slabs_newslab(id) != 0)) {
236         /* We don't have more memory available */
237         ret = NULL;
238     } else if (p-&gt;sl_curr != 0) {
239         /* return off our freelist */
240         it = (item *)p-&gt;slots;
241         p-&gt;slots = it-&gt;next;
242         if (it-&gt;next) it-&gt;next-&gt;prev = 0;
243         p-&gt;sl_curr--;
244         ret = (void *)it;
245     }
246  
247     if (ret) {
248         p-&gt;requested += size;
249         MEMCACHED_SLABS_ALLOCATE(size, id, p-&gt;size, ret);
250     } else {
251         MEMCACHED_SLABS_ALLOCATE_FAILED(size, id);
252     }
253  
254     return ret;
255 }
</code></pre>

<p>slab优先从slots（空闲chunk空间列表）中申请空间，如果没有则尝试申请一个Page的新空间（do_slab_newslab()），申请新slab是会先判断是否进行slab_reasgin（重新分配slab空间，默认不开启）。</p>

<h2>内存浪费</h2>

<p>根据上述描述，Memcache使用Slab预分配的方式进行内存管理提升了性能（减少分配内存的消耗），但是带来了内存浪费，主要体现在：</p>

<ol>
<li><p>Data Item Size &lt;= Chunk Size，Chunk是存储数据项的最小单元，数据项的大小必须不大于其所在的Chunk大小。也就是说76B的数据对象存入96B的Chunk中，将带来96B-76B=20B的空间浪费。</p></li>
<li><p>Memcache是按照Page申请和使用内存的，当Page大小不是Chunk的整数倍时，余下的空间将被浪费。即如果PageSize=1M，ChunkSize=1000B,那么将有1024*1024%1000=576B的空间浪费。</p></li>
<li><p>Memcache默认是不开启slab reasign的，也就是说分配已经分配给一个slab的内存空间，即使该slab不用，默认也不会分配给其他slab的</p></li>
</ol>


<h2>案例分析：定长问题导致逐出</h2>

<p>memcache的chunk分布是均匀的，这是为了通用性考虑，但是现实中一些场景chunk的分布是不均运的，例如为了减小对数据库的压力，对数据进行了全量缓存，为标识数据库中不存在的记录，向缓存中放置了一个stupidObject。这个对象大小是固定的，且该数据的量很大，导致该数据类型所在的slab占用了大量缓存空间。再一次调整对象结构时，修改了这个StupidObject大小，使其分布在另一个slab中，但是这个原分配的slab空间不会回收，空闲空间不足，导致大量逐出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用方法链和静态工厂构造流畅接口]]></title>
    <link href="http://jiangbo.me/blog/2012/04/08/build-fluent-interface-with-method-chain-and-static-factory/"/>
    <updated>2012-04-08T11:23:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/04/08/build-fluent-interface-with-method-chain-and-static-factory</id>
    <content type="html"><![CDATA[<h3>问题现象</h3>

<p>现有的VO，DO，Model等模型类中，均遵循JavaBean规范，为对属性的访问提供了getter和setter方法，并且在实际使用时通常为构造一个模型实例，需要调用大段的setter方法。下面以VasViewVO为例：</p>

<pre><code>public class VasViewVO {

    private String description;

    private Date gmtOpen;

    private Date gmtClose;

    private CreditVasType serviceType;

    private CreditVasMemberStatus creditVasMemberStatus;
    ...//此处省略getter和setter方法
}
</code></pre>

<p>通常按照如下方式构造一个VasViewVO实例：</p>

<pre><code>    VasViewVO vasViewVO = new VasViewVO();
    vasViewVO.setCreditVasMemberStatus(CreditVasMemberStatus.OPEN);
    vasViewVO.setGmtOpen(new Date());
    vasViewVO.setServiceType(CreditVasType.fastpay);
    vasViewVO.setDescription("open fastpay");
    //do something with vasViewVO
</code></pre>

<p>如此构造VasViewVO的实例并非有严重的逻辑错误或者其他的问题，只是不够简洁易懂（贴近自然语言）。
最近学习过jQuery的都知道，jQuery中可以按如下方式连续调用api</p>

<pre><code>    $("p").hide().fadeIn("slow").slideUp("slow").slideDown("slow");
</code></pre>

<p>如果Java程序中也可以使用类似的方式将会简洁许多。</p>

<h3>解决方法</h3>

<h4>使用方法链</h4>

<p>jQuery中之所以能够连续调用api，主要是因为每个方法返回的都是一个jQuery对象。Java本身也可这样做，即返回一个this(自身引用)，也就是常说的<a href="http://en.wikipedia.org/wiki/Method_chaining">方法链</a>。
方法链的实现非常简单，通常的setter方法返回void，方法链返回的是this引用，如下：</p>

<pre><code>    public VasViewVO description(String description) {
        this.description = description;
        return this;
    }

    public VasViewVO gmtOpen(Date gmtOpen) {
        this.gmtOpen = gmtOpen;
        return this;
    }

    public VasViewVO gmtClose(Date gmtClose) {
        this.gmtClose = gmtClose;
        return this;
    }

    public VasViewVO serviceType(CreditVasType serviceType) {
        this.serviceType = serviceType;
        return this;
    }
</code></pre>

<p>如此一来在调用时只需要新建一个对象，连续调用赋值方法即可：</p>

<pre><code>    VasViewVO vasView = new VasViewVO();
    vasView.creditVasMemberStatus(CreditVasMemberStatus.CLOSE)
            .description("Commoent cxxx").gmtClose(new Date())
            .gmtOpen(new Date()).serviceType(CreditVasType.fastpay);
</code></pre>

<p>如此相比连续调用5次setter方法简洁的多。</p>

<h4>使用静态工厂和static import优化</h4>

<p>使用方法链之后简化了setter调用，但是每次还必须要先new一个实例，略显繁琐。这个问题可以通过Effectvie Java的第一条静态工厂来解决，即在VasViewVO内部实现一个静态工厂方法。</p>

<pre><code>    public static VasViewVO with() {
        return new VasViewVO();
    }
</code></pre>

<p>这个with的方法名与一般的静态工厂所用的getInstance，newInstance不同，主要时为了更加贴近自然语言。
如此，构造一个VasViewVO实例就可简化为</p>

<pre><code>    VasViewVO vasViewVO = VasViewVO.with()
                .creditVasMemberStatus(CreditVasMemberStatus.CLOSE)
                .description("Commoent cxxx").gmtClose(new Date())
                .gmtOpen(new Date()).serviceType(CreditVasType.fastpay);
</code></pre>

<p>代码已经很简洁，不过每次都是用枚举类长长的类名，感觉很是不雅，可以通过static import解决，最终的到的简化后构造一个VasViewVO实例的代码如下：</p>

<pre><code>import static  com.alibaba.china.credit.common.constants.CreditVasType.*;
import static com.alibaba.china.credit.vas.dal.constant.CreditVasMemberStatus.*;
public class Test{
    public static void main(String[] args) {
        . . .

        VasViewVO vasViewVO = VasViewVO.with()
            .creditVasMemberStatus(CLOSE)
            .description("Commoent cxxx").gmtClose(new Date())
            .gmtOpen(new Date()).serviceType(fastpay);
        . . .
    }
}
</code></pre>

<h3>进阶总结</h3>

<p>程序设计要解决的是讲现实世界中的问题描述转化为计算机可识别的计算机语言（二进制码），因此编程语言必须为这一转化过程提供有效的抽像机制。现有编程语言提供的抽象机制侧重各有不同，在C，C++，JAVA等通用语言中更关注语言的基本语义，离实际的问题域描述较远；SQL，CSS等特定领域语言更关注特定问题域问题的抽象，更贴近实际的问题描述。</p>

<p>站在人的角度，语言越是贴近实际问题的描述越是容易理解，对问题的描述也更加准确。但现有的特定领域语言又不具备通用变成语言解决问题的的通用性，因此我们更希望能够在通用语言上进行更高层次的抽象，使其更加贴近具体的问题域。某种程度上讲语言提供的API或者方法库就是对基本问题的更高层次抽象，但离具体的问题域还是太远，有时我们更渴望更加贴近具体问题的语言来解决问题并兼具通用语言的通用性，因此诞生了通用语言的内部DSL。
<a href="http://www.martinfowler.com/bliki/FluentInterface.html">流畅接口（Fluent Interface）</a>是实现内部DSL的重要手段，<a href="http://en.wikipedia.org/wiki/Fluent_interface">wikipedia上如此描述</a>Fluent Interface：</p>

<pre><code>A fluent interface (as first coined by Eric Evans and Martin Fowler) is an implementation of an object oriented API that aims to provide for more readable code. A fluent interface is normally implemented by using method chaining to relay the instruction context of a subsequent call (but a fluent interface entails more than just method chaining)。
</code></pre>

<p>方法链（method chain）是实现Fluent Interface的重要手段（注意，method chain!= Fluent Interface!=DSL）。但仅仅有方法链是不足够构建有效的DSL的，除此之外还需要一些且他编程技巧，比如static factory和static import等，具体请参见<a href="http://www.infoq.com/articles/internal-dsls-java">《An Approach to Internal Domain－Specific Languages in Java》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java.lang.instrument笔记]]></title>
    <link href="http://jiangbo.me/blog/2012/02/21/java-lang-instrument/"/>
    <updated>2012-02-21T17:13:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/02/21/java-lang-instrument</id>
    <content type="html"><![CDATA[<h2>什么是Instrumentation？</h2>

<p>java Instrumentation指的是可以用独立于应用程序之外的代理（agent）程序来监测和协助运行在JVM上的应用程序。这种监测和协助包括但不限于获取JVM运行时状态，替换和修改类定义等。
Java SE5中使用JVM TI替代了JVM PI和JVM DI。提供一套代理机制，支持独立于JVM应用程序之外的程序以代理的方式连接和访问JVM。java.lang.instrument是在JVM TI的基础上提供的Java版本的实现。
Instrumentation提供的主要功能是修改jvm中类的行为。
Java SE6中由两种应用Instrumentation的方式，premain（命令行）和agentmain（运行时）</p>

<h2>premain方式</h2>

<p>在Java SE5时代，Instrument只提供了premain一种方式，即在真正的应用程序（包含main方法的程序）main方法启动前启动一个代理程序。例如使用如下命令：</p>

<pre><code>java -javaagent:agent_jar_path[=options] java_app_name
</code></pre>

<p>可以在启动名为java_app_name的应用之前启动一个agent_jar_path指定位置的agent jar。
实现这样一个agent jar包，必须满足两个条件：</p>

<ol>
<li>在这个jar包的manifest文件中包含Premain-Class属性，并且改属性的值为代理类全路径名。</li>
<li>代理类必须提供一个public static void premain(String args, Instrumentation inst)或 public static void premain(String args) 方法。</li>
</ol>


<p>当在命令行启动该代理jar时，VM会根据manifest中指定的代理类，使用于main类相同的系统类加载器（即ClassLoader.getSystemClassLoader()获得的加载器）加载代理类。在执行main方法前执行premain()方法。如果premain(String args, Instrumentation inst)和premain(String args)同时存在时，优先使用前者。其中方法参数args即命令中的options，类型为String（注意不是String[]），因此如果需要多个参数，需要在方法中自己处理（比如用&#8221;;&#8221;分割多个参数之类）；inst是运行时由VM自动传入的Instrumentation实例，可以用于获取VM信息。</p>

<h2>premain实例-打印所有的方法调用</h2>

<p>下面实现一个打印程序执行过程中所有方法调用的功能，这个功能可以通过AOP其他方式实现，这里只是尝试使用Instrumentation进行ClassFile的字节码转换实现：</p>

<h3>构造agent类</h3>

<p>premain方式的agent类必须提供premain方法，代码如下：</p>

<pre><code>package test;

import java.lang.instrument.Instrumentation;

public class Agent {

    public static void premain(String args, Instrumentation inst){
        System.out.println("Hi, I'm agent!");
        inst.addTransformer(new TestTransformer());
    }
}
</code></pre>

<p>premain有两个参数，args为自定义传入的代理类参数，inst为VM自动传入的Instrumentation实例。 premain方法的内容很简单，除了标准输出外，只有</p>

<pre><code>inst.addTransformer(new TestTransformer());
</code></pre>

<p>这行代码的意思是向inst中添加一个类的转换器。用于转换类的行为。</p>

<h3>构造Transformer</h3>

<p>下面来实现上述过程中的TestTransformer来完成打印调用方法的类定义转换。</p>

<pre><code>package test;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class TestTransformer implements ClassFileTransformer {

    @Override
    public byte[] transform(ClassLoader arg0, String arg1, Class&lt;?&gt; arg2,
            ProtectionDomain arg3, byte[] arg4)
            throws IllegalClassFormatException {
        ClassReader cr = new ClassReader(arg4);
        ClassNode cn = new ClassNode();
        cr.accept(cn, 0);
        for (Object obj : cn.methods) {
            MethodNode md = (MethodNode) obj;
            if ("&lt;init&gt;".endsWith(md.name) || "&lt;clinit&gt;".equals(md.name)) {
                continue;
            }
            InsnList insns = md.instructions;
            InsnList il = new InsnList();
            il.add(new FieldInsnNode(Opcodes.GETSTATIC, "java/lang/System",
                    "out", "Ljava/io/PrintStream;"));
            il.add(new LdcInsnNode("Enter method-&gt; " + cn.name+"."+md.name));
            il.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,
                    "java/io/PrintStream", "println", "(Ljava/lang/String;)V"));
            insns.insert(il);
            md.maxStack += 3;

        }
        ClassWriter cw = new ClassWriter(0);
        cn.accept(cw);
        return cw.toByteArray();
    }

}
</code></pre>

<p>TestTransformer实现了ClassFileTransformer接口，该接口只有一个transform方法，参数传入包括该类的类加载器，类名，原字节码字节流等，返回被转换后的字节码字节流。
TestTransformer主要使用ASM实现在所有的类定义的方法中，在方法开始出添加了一段打印该类名和方法名的字节码。在转换完成后返回新的字节码字节流。详细的ASM使用请参考ASM手册。</p>

<h3>设置MANIFEST.MF</h3>

<p>设置MANIFEST.MF文件中的属性，文件内容如下：</p>

<pre><code>Manifest-Version: 1.0
Premain-Class: test.Agent
Created-By: 1.6.0_29
</code></pre>

<h3>测试</h3>

<p>代码编写完成后将代码编译打成agent.jar。
编写测试代码：</p>

<pre><code>public class TestAgent {

    public static void main(String[] args) {
        TestAgent ta = new TestAgent();
        ta.test();
    }

    public void test() {
        System.out.println("I'm TestAgent");
    }

}
</code></pre>

<p>从命令行执行该类，并设置agent.jar</p>

<pre><code>java -javaagent:agent.jar TestAgent
</code></pre>

<p>将打印出程序运行过程中实际执行过的所有方法名：</p>

<pre><code>Hi, I'm agent!
Enter method-&gt; test/TestAgent.main
Enter method-&gt; test/TestAgent.test
I'm TestAgent
Enter method-&gt; java/util/IdentityHashMap$KeySet.iterator
Enter method-&gt; java/util/IdentityHashMap$IdentityHashMapIterator.hasNext
Enter method-&gt; java/util/IdentityHashMap$KeyIterator.next
Enter method-&gt; java/util/IdentityHashMap$IdentityHashMapIterator.nextIndex
Enter method-&gt; java/util/IdentityHashMap$IdentityHashMapIterator.hasNext
Enter method-&gt; java/util/IdentityHashMap$KeySet.iterator
Enter method-&gt; java/util/IdentityHashMap$IdentityHashMapIterator.hasNext
Enter method-&gt; java/util/IdentityHashMap$KeyIterator.next
Enter method-&gt; java/util/IdentityHashMap$IdentityHashMapIterator.nextIndex
Enter method-&gt; com/apple/java/Usage$3.run
。。。
</code></pre>

<p>从输出中可以看出，程序首先执行的是代理类中的premain方法（不过代理类自身不会被自己转换，所以不能打印出代理类的方法名），然后是应用程序中的main方法。</p>

<h2>agentmain方式</h2>

<p>premain时Java SE5开始就提供的代理方式，给了开发者诸多惊喜，不过也有些须不变，由于其必须在命令行指定代理jar，并且代理类必须在main方法前启动。因此，要求开发者在应用前就必须确认代理的处理逻辑和参数内容等等，在有些场合下，这是比较苦难的。比如正常的生产环境下，一般不会开启代理功能，但是在发生问题时，我们不希望停止应用就能够动态的去修改一些类的行为，以帮助排查问题，这在应用启动前是无法确定的。
为解决运行时启动代理类的问题，Java SE6开始，提供了在应用程序的VM启动后在动态添加代理的方式，即agentmain方式。
与Permain类似，agent方式同样需要提供一个agent jar，并且这个jar需要满足：</p>

<ol>
<li>在manifest中指定Agent-Class属性，值为代理类全路径</li>
<li>代理类需要提供public static void agentmain(String args, Instrumentation inst)或public static void agentmain(String args)方法。并且再二者同时存在时以前者优先。args和inst和premain中的一致。</li>
</ol>


<p>不过如此设计的再运行时进行代理有个问题——如何在应用程序启动之后再开启代理程序呢？
JDK6中提供了Java Tools API，其中Attach API可以满足这个需求。</p>

<p>Attach API中的VirtualMachine代表一个运行中的VM。其提供了loadAgent()方法，可以在运行时动态加载一个代理jar。具体需要参考<a href="">《Attach API》</a></p>

<h2>agentmain实例-打印当前已加载的类</h2>

<h3>构造agent类</h3>

<p>agentmain方式的代理类必须提供agentmain方法：</p>

<pre><code>package loaded;

import java.lang.instrument.Instrumentation;

public class LoadedAgent {
    @SuppressWarnings("rawtypes")
    public static void agentmain(String args, Instrumentation inst){
        Class[] classes = inst.getAllLoadedClasses();
        for(Class cls :classes){
            System.out.println(cls.getName());
        }
    }
}
</code></pre>

<p>agentmain方法通过传入的Instrumentation实例获取当前系统中已加载的类。</p>

<h3>设置MANNIFEST.MF</h3>

<p>设置MANIFEST.MF文件，指定Agent-Class:</p>

<pre><code>Manifest-Version: 1.0
Agent-Class: loaded.LoadedAgent
Created-By: 1.6.0_29
</code></pre>

<h3>绑定到目标VM</h3>

<p>将agent类和MANIFEST.MF文件编译打成loadagent.jar后，由于agent main方式无法向pre main方式那样在命令行指定代理jar，因此需要借助Attach Tools API。</p>

<pre><code>package attach;

import java.io.IOException;

import com.sun.tools.attach.AgentInitializationException;
import com.sun.tools.attach.AgentLoadException;
import com.sun.tools.attach.AttachNotSupportedException;
import com.sun.tools.attach.VirtualMachine;

public class Test {
    public static void main(String[] args) throws AttachNotSupportedException,
            IOException, AgentLoadException, AgentInitializationException {
        VirtualMachine vm = VirtualMachine.attach(args[0]);
        vm.loadAgent("/Users/jiangbo/Workspace/code/java/javaagent/loadagent.jar");

    }

}
</code></pre>

<p>该程序接受一个参数为目标应用程序的进程id，通过Attach Tools API的VirtualMachine.attach方法绑定到目标VM，并向其中加载代理jar。</p>

<h3>构造目标测试程序</h3>

<p>构造一个测试用的目标应用程序：</p>

<pre><code>package attach;

public class TargetVM {
    public static void main(String[] args) throws InterruptedException{
        while(true){
            Thread.sleep(1000);
        }
    }
}
</code></pre>

<p>这个测试程序什么都不做，只是不停的sleep。:)
运行该程序，获得进程ID=33902。
运行上面绑定到VM的Test程序，将进程id作为参数传入：</p>

<pre><code>java attach.Test 33902
</code></pre>

<p>观察输出，会打印出系统当前所有已经加载类名</p>

<pre><code>java.lang.NoClassDefFoundError
java.lang.StrictMath
java.security.SignatureSpi
java.lang.Runtime
java.util.Hashtable$EmptyEnumerator
sun.security.pkcs.PKCS7
java.lang.InterruptedException
java.io.FileDescriptor$1
java.nio.HeapByteBuffer
java.lang.ThreadGroup
[Ljava.lang.ThreadGroup;
java.io.FileSystem
。。。
</code></pre>

<h2>参考文档</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument API docs</a></li>
<li><a href="https://blogs.oracle.com/CoreJavaTechTips/entry/the_attach_api">The Attach API</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html">Java SE6新特性：Instrumentation新功能</a></li>
</ul>


<h2>附：agent jar中manifest的属性</h2>

<ul>
<li>Premain-Class: 当在VM启动时，在命令行中指定代理jar时，必须在manifest中设置Premain-Class属性，值为代理类全类名，并且该代理类必须提供premain方法。否则JVM会异常终止。</li>
<li>Agent-Class: 当在VM启动之后，动态添加代理jar包时，代理jar包中manifest必须设置Agent-Class属性，值为代理类全类名，并且该代理类必须提供agentmain方法，否则无法启动该代理。</li>
<li>Boot-Class-Path: Bootstrap class loader加载类时的搜索路径，可选。</li>
<li>Can-Redefine-Classes: true/false；标示代理类是否能够重定义类。可选。</li>
<li>Can-Retransform-Classes: true/false；标示代理类是否能够转换类定义。可选。</li>
<li>Can-Set-Native-Prefix::true/false；标示代理类是否需要本地方法前缀，可选。</li>
</ul>


<p><strong> 当一个代理jar包中的manifest文件中既有Premain-Class又有Agent-Class时，如果以命令行方式在VM启动前指定代理jar，则使用Premain-Class；反之如果在VM启动后，动态添加代理jar，则使用Agent-Class </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty ClassLoader解析]]></title>
    <link href="http://jiangbo.me/blog/2012/02/14/jetty-classloader/"/>
    <updated>2012-02-14T00:26:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/02/14/jetty-classloader</id>
    <content type="html"><![CDATA[<h2>什么是类加载器？</h2>

<p>类加载器（ClassLoader）指将类加载到虚拟机中的代码模块，所有的类必须通过加载器被加载到JVM中。JVM规范将累加在的过程外置于JVM实现，让应用程序自己决定如何获取所需类，这种机制位类层次划分，热加载，模块化奠定了基础。</p>

<h2>类加载器分类</h2>

<p>类加载器主要分为：</p>

<ul>
<li>启动类加载器(Bootstrap ClassLoader)：主要负责加载<JAVA_HOME>\lib目录中或者-Xbootclasspath中指定的，并且被虚拟机识别的类库加载到VM中。这个加载器是JVM自身的一部分，用本地代码实现的(openjdk中源码位于hotspot/src/share/vm/classfile/classLoader.cpp中)，无法直接被java代码引用。</li>
<li>扩展类加载器(Extension ClassLoader)：主要负责加载jdk扩展类库<JAVA_HOME>\lib\ext或者java.ext.dirs系统属性指定的目录中jar文件，由sun.misc.Launcher$ExtClassLoader实现</li>
<li>系统类加载器(System ClassLoader)：用于加载CLASSPATH中指定的类，由sun.misc.Launcher$AppClassLoader实现。该类即ClassLoader.getSystemLoader()的返回值，是应用程序默认的类加载器。</li>
<li>自定义加载器(User ClassLoader)：用户可以自定义自己的类加载器</li>
</ul>


<h2>双亲委托模型</h2>

<p>JDK中要求所有的自定义ClassLoader 必须扩展自抽象类java.lang.ClassLoader。该类的文档说名中有一个段关于delegate model的描述：</p>

<blockquote><p>The ClassLoader class uses a <code>delegation model</code> to search for classes and resources. Each instance of ClassLoader has an associated parent class loader. When requested to find a class or resource, a ClassLoader instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine&#8217;s built-in class loader, called the &#8220;bootstrap class loader&#8221;, does not itself have a parent but may serve as the parent of a ClassLoader instance.</p></blockquote>

<p>简单来说这个delegate model要求除了Bootstrap ClassLoader之外，其余ClassLoader都需要关联一个parent ClassLoader（这种关联方式采用的时组合而非继承），在执行加载class时，首先委托给parent ClassLoader加载，只有当parent ClassLoader无法加载时，再由自身加载。各加载器的关联关系如下：</p>

<pre><code>        Bootstrap ClassLoader
                 |
        Extension ClassLoader
                 |
        System ClassLoader
            /           \
    User1 ClassLoader   User2 ClassLoader
</code></pre>

<p>Bootstrap ClassLoader是最根层的加载器，用户自定义加载器建议使用系统类加载器作为parent。
这种委托模型的好处显而易见，它维护了类加载器之间的层次优先级关系。使所有的类加载优先由parent加载，这保证了java基础类库中的加载只会有一份。以java.lang.Object为例，委托模式保证了这个类最终只会由BootstrapClassLoader来加载，以此来保证所有环境中只有同一个类。否则由各加载器自由发挥，当用户自己定义各同名的java.lang.Object类时，系统会出现多分Objec类，最根基的行为出现混乱。（当然，你还是可以自定义出一个同名的java.lang.Object，并且顺利通过编译，但是它正常情况下永远不会被加载）。</p>

<p><strong><em>这个委托模型并非jvm的强制规范，只是jdk中建议的一种模式，有时会发现不遵守这种模式的行为却能产生奇妙的效果，如热部署，OSGI等。</em></strong></p>

<h2>Jetty中的ClassLoader</h2>

<p>jetty，tomcat等web容器通常都会对classloader做扩展，因为一个正常的容器至少要保证其内部运行的多个webapp之间：私有的类库不受影响，并且公有的类库可以共享。这正好发挥classloader的层级划分优势。
jetty中有一个org.mortbay.jetty.webapp.WebAppClassLoader，负责加载一个webapp context中的应用类，WebAppClassLoader以系统类加载器作为parent，用于加载系统类。不过servlet规范使得web容器的classloader比正常的classloader委托模型稍稍复杂，servlet规范要求：</p>

<ol>
<li>WEB-INF/lib 和 WEB-INF/classes优先于父容器中的类加载，比如WEB-INF/classes下有个XYZ类，CLASSPATH下也有个XYZ类，jetty中优先加载的是WEB-INF/classes下的，这与正常的父加载器优先相反。</li>
<li>系统类比如java.lang.String不遵循第一条， WEB-INF/classes或WEB-INF/lib下的类不能替换系统类。不过规范中没有明确规定哪些是系统类，jetty中的实现是按照类的全路径名判断。</li>
<li>Server的实现类不被应用中的类引用，即Server的实现类不能被人和应用类加载器加载。不过，同样的，规范里没有明确规定哪些是Server的实现类，jetty中同样是按照类的全路径名判断。</li>
</ol>


<p>为了处理上述三个问题，jetty的应用类加载器(org.mortbay.jetty.webapp.WebAppClassLoader)做了些特殊处理。</p>

<h3>WebAppClassLoader的实现</h3>

<p>首先看WebAppClassLoader的实现，WebAppClassLoader的构造器中有如下代码：</p>

<pre><code>super(new URL[]{},parent!=null?parent
            :(Thread.currentThread().getContextClassLoader()!=null?Thread.currentThread().getContextClassLoader()
                    :(WebAppClassLoader.class.getClassLoader()!=null?WebAppClassLoader.class.getClassLoader()
                            :ClassLoader.getSystemClassLoader())));
</code></pre>

<p>表明WebAppClassLoader还是按照正常的范式设置parent classloader
然后看重要的loadclass方法实现：</p>

<pre><code>@Override
protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException
{
    Class&lt;?&gt; c= findLoadedClass(name);
    ClassNotFoundException ex= null;
    boolean tried_parent= false;

    boolean system_class=_context.isSystemClass(name);
    boolean server_class=_context.isServerClass(name);

    if (system_class &amp;&amp; server_class)
    {
        return null;
    }

    if (c == null &amp;&amp; _parent!=null &amp;&amp; (_context.isParentLoaderPriority() || system_class) &amp;&amp; !server_class)
    {
        tried_parent= true;
        try
        {
            c= _parent.loadClass(name);
            if (LOG.isDebugEnabled())
                LOG.debug("loaded " + c);
        }
        catch (ClassNotFoundException e)
        {
            ex= e;
        }
    }

    if (c == null)
    {
        try
        {
            c= this.findClass(name);
        }
        catch (ClassNotFoundException e)
        {
            ex= e;
        }
    }

    if (c == null &amp;&amp; _parent!=null &amp;&amp; !tried_parent &amp;&amp; !server_class )
        c= _parent.loadClass(name);

    if (c == null)
        throw ex;

    if (resolve)
        resolveClass(c);

    if (LOG.isDebugEnabled())
        LOG.debug("loaded " + c+ " from "+c.getClassLoader());

    return c;
}
</code></pre>

<p>loadclass按照：</p>

<ol>
<li>findLoadedClass(name)-检查类是否已经加载</li>
<li>判断该类是否为系统类或server类</li>
<li>如果该类未加载且父加载器不为空且设置了父加载器优先或类类为系统类，且该类不是server类，则尝试使用父加载器加载该类</li>
<li>如果不是父加载器优先或者父加载器未加载到该类，使用WebAppClassLoader加载该类</li>
<li>如果是不是父加载器优先，并且WebAppClassLoader未加载到该类，尝试使用父加载器加载该类</li>
<li>找到则返回，否则抛出ClassNotFoundException</li>
</ol>


<h3>ClassLoader Priority</h3>

<p>上述过程涉及一个加载器优先级的概念，这也是针对前述第一条规范中WEB-INF/lib和WEB-INF/classes类优先的处理。jetty中父加载器优先的配置项可以通过环境变量</p>

<pre><code>org.eclipse.jetty.server.webapp.parentLoaderPriority=false(默认)/true来设置
</code></pre>

<p>也可以通过</p>

<pre><code>org.eclipse.jetty.webapp.WebAppContext.setParentLoaderPriority(boolean)方法来设置
</code></pre>

<p>优于该配置默认是false，因此在load class过程中优先使用WebAppClassLoader加载WEB-INF/lib和WEB-INF/classes中的类。
当将该配置项设为true时需要确认类加载顺序没有问题。</p>

<h3>设置系统类</h3>

<p>规范2中约定系统类不能被应用类覆盖，但是没有明确规定哪些时系统类，jetty中以类的package路径名来区分，当类的package路径名位包含于</p>

<pre><code>  public final static String[] __dftSystemClasses =
    {
        "java.",                            
        "javax.",                           
        "org.xml.",                         
        "org.w3c.",                         
        "org.apache.commons.logging.",      
        "org.eclipse.jetty.continuation.",  
        "org.eclipse.jetty.jndi.",          
        "org.eclipse.jetty.plus.jaas.",     
        "org.eclipse.jetty.websocket.WebSocket", 
        "org.eclipse.jetty.websocket.WebSocketFactory", 
        "org.eclipse.jetty.servlet.DefaultServlet" 
    } ;
</code></pre>

<p>时，会被认为是系统类。（该定义位于<a href="https://github.com/eclipse/jetty.project/blob/master/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppContext.java">WebAppContext@github</a>中）</p>

<p>因此，我们可以通过 org.eclipse.jetty.webapp.WebAppContext.setSystemClasses(String Array)或者org.eclipse.jetty.webapp.WebAppContext.addSystemClass(String)来设置系统类。
再次提醒，系统类是对多有应用都可见。</p>

<h3>设置Server类</h3>

<p>规范3中约定Server类不对任何应用可见。jetty同样是用package路径名来区分哪些是Server类。Server类包括：</p>

<pre><code>public final static String[] __dftServerClasses =
{
    "-org.eclipse.jetty.continuation.", 
    "-org.eclipse.jetty.jndi.",         
    "-org.eclipse.jetty.plus.jaas.",    
    "-org.eclipse.jetty.websocket.WebSocket", 
    "-org.eclipse.jetty.websocket.WebSocketFactory", 
    "-org.eclipse.jetty.servlet.DefaultServlet", 
    "-org.eclipse.jetty.servlet.listener.", 
    "org.eclipse.jetty."                
} ;
</code></pre>

<p>我们可以通过， org.eclipse.jetty.webapp.WebAppContext.setServerClasses(String Array) 或org.eclipse.jetty.webapp.WebAppContext.addServerClass(String)方法设置Server类。
注意，Server类是对所有应用都不可见的，但是WEB-INF/lib下的类可以替换Server类。</p>

<h3>自定义WebApp ClassLoader</h3>

<p>当默认的WebAppClassLoader不能满足需求时，可以自定义WebApp ClassLoader，不过jetty建议自定义的classloader要扩展于默认的WebAppClassLoader实现。具体请参考<a href="http://wiki.eclipse.org/Jetty/Reference">jetty手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Mac上解压Windows压缩包乱码问题]]></title>
    <link href="http://jiangbo.me/blog/2012/02/13/unzip-file-from-win-to-mac/"/>
    <updated>2012-02-13T16:53:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/02/13/unzip-file-from-win-to-mac</id>
    <content type="html"><![CDATA[<p>Windows上默认使用的GBK编码，Mac上默认使用的unicode编码，因此Win上的压缩包再Mac上解压会出现文件名乱码:(
下面是用ruby写的一个解决方法：</p>

<p><a href="https://github.com/jiang-bo/codingforfun/blob/master/ruby/utils/unzipFromWinToMac.rb">source@github</a></p>

<pre><code>require 'zip/zip'
require 'iconv'

# To unzip zipfile which zip in GBK to UTF-8.
#
# When you zip a file on Windows, it will encode in GBK default.
# Then you unzip it on Mac OSX which use unicode default, it will be wrong.
# This code is used to fix this problem:)
#
# @Author: jiang-bo
Zip::ZipInputStream::open(zipFile){
  |io|
  while(entry = io.get_next_entry)
    name=Iconv.iconv("UTF-8","GBK", entry.name)[0]

    puts "Extracting #{name}"
    if name.end_with?('/')
      Dir.mkdir(name.to_s)
    else
      entry.extract(name.to_s)
    end
  end
}
</code></pre>

<p>主要依赖rubyzip和iconv两个包：</p>

<pre><code>gem install rubyzip
gem install iconv
</code></pre>

<p>使用ruby zip中ZipInputStream打开压缩包，然后使用Iconv.iconv将其中的文件名由&#8217;GBK&#8217;转码为&#8217;UTF-8&#8217;。
然后解压压缩包。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM Luncher Lifecycle]]></title>
    <link href="http://jiangbo.me/blog/2012/02/10/jvm-luncher-lifecycle/"/>
    <updated>2012-02-10T23:51:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/02/10/jvm-luncher-lifecycle</id>
    <content type="html"><![CDATA[<h1>JVM运行时环境</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6编译OpenJDK7]]></title>
    <link href="http://jiangbo.me/blog/2012/02/10/compile-openjdk7-on-centos6/"/>
    <updated>2012-02-10T14:39:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/02/10/compile-openjdk7-on-centos6</id>
    <content type="html"><![CDATA[<h2>一.环境准备</h2>

<h3>1.jdk</h3>

<p>在编译JDK7之前，需要有个JDK6版本，这个貌似有个鸡生蛋，还是蛋生鸡的问题，不过，这个确实需要:)</p>

<h3>2.alsa包</h3>

<p>linux版本的jdk编译需要ALSA（Advanced Linux Sound Architecture）包，大部分linux发行版都没有预装，CentOS可以通过如下命令检查：</p>

<pre><code> rpm -qa |grep alsa
</code></pre>

<p>alsa-lib和alsa-lib-devel均需要。CentOS缺少alsa-lib-devel，通过如下命令安装：</p>

<pre><code> yum install alsa-lib-devel
</code></pre>

<h3>3.cups-devel</h3>

<pre><code>yum install cups-devel
</code></pre>

<h3>4.libXi-devel</h3>

<pre><code>yum install libXi-devel
</code></pre>

<h3>5.freetype2.3</h3>

<pre><code>wget http://download.savannah.gnu.org/releases/freetype/freetype-2.3.12.tar.gz
tar -xvf freetype-2.3.12.tar.gz
cd freetype-2.3.12
./configure &amp;&amp; make &amp;&amp; make install
</code></pre>

<h3>6. ant</h3>

<pre><code>wget http://mirror.bit.edu.cn/apache//ant/binaries/apache-ant-1.8.2-bin.zip
unzip apache-ant-1.8.2-bin.zip
</code></pre>

<h3>7.g++</h3>

<pre><code>yum install gcc gcc-c++
</code></pre>

<h2>二、设置环境变量</h2>

<p>jdk编译过程中有一些环境变量需要设置，详细的请参考README-builds.html，下面写的只是一些必须设置的环境变量：</p>

<pre><code>export ALT_BOOTDIR=/usr/opt/jdk # 预装的jdk7目录
export ANT_HOME=ant安装目录
export ALT_FREETYPE_HEADERS_PATH=/usr/local/include/freetype2 #freetype2头文件安装目录
export ALT_FREETYPE_LIB_PATH=/usr/local/lib #freetype2 lib目录
</code></pre>

<h2>三、编译</h2>

<h3>1.健全检查</h3>

<p>可以通过如下命令检查环境配置是否准备好：</p>

<pre><code>make sanity ARCH_DATA_MODEL=64
</code></pre>

<p>如果最终输出：</p>

<pre><code>Sanity check passed.
</code></pre>

<p>则表示环境检查通过，否则需要根据提示信息排查问题。</p>

<h3>2.执行编译</h3>

<p>通过如下命令开始编译：</p>

<pre><code>make ARCH_DATA_MODEL=64
</code></pre>

<h3>3.问题排查：</h3>

<p>编译过程中出现一些问题：</p>

<h3>1)缺少jaxp和jaxws</h3>

<p>错误信息</p>

<pre><code>ERROR: Cannot find source for project jaxp
</code></pre>

<p>原因是现在jaxp源码分支和jdk源码分支分开了，但是jaxws是jdk中的一部分，所以完全编译需要jaxp源码，针对该问题的描述可以查看README-build.html中TroubleShooting部分。
解决方式有两种：
一种是先下载好源码包，以drops的方式安装，具体参考README-build.html
另外一种是使用在线安装，在编译时加入允许下载源码的配置:</p>

<pre><code>make ARCH_DATA_MODEL=64 ALLOW_DOWNLOADS=true
</code></pre>

<h3>2)缺少X＊库</h3>

<p>编译过程中多次出现如下缺少X*, awt之类的错误，基本上都是因为缺乏图形相关的库</p>

<pre><code>../../../src/solaris/native/sun/awt/img_util_md.h:32: ??:expected specifier-qualifier-list before 'XID'
make[5]: *** [/home/jiangbo/Workspace/jdk/openjdk/build/linux-amd64/tmp/sun/sun.awt/awt/obj64/BufImgSurfaceData.o] Error 1
make[5]: *** Waiting for unfinished jobs....
make[5]: Leaving directory `/home/jiangbo/Workspace/jdk/openjdk/jdk/make/sun/awt'
make[4]: *** [library_parallel_compile] Error 2
make[4]: Leaving directory `/home/jiangbo/Workspace/jdk/openjdk/jdk/make/sun/awt'
make[3]: *** [all] Error 1
make[3]: Leaving directory `/home/jiangbo/Workspace/jdk/openjdk/jdk/make/sun'
make[2]: *** [all] Error 1
make[2]: Leaving directory `/home/jiangbo/Workspace/jdk/openjdk/jdk/make'
make[1]: *** [jdk-build] Error 2
make[1]: Leaving directory `/home/jiangbo/Workspace/jdk/openjdk'
make: *** [build_product_image] Error 2
</code></pre>

<p>解决方式时安装X相关的库</p>

<pre><code>yum install libX*
</code></pre>

<p>这个有些暴力，不过比较有效:)</p>

<h2>四、测试编译结果</h2>

<p>漫长的编译之后直至出现如下类似内容时，表示编译完成了：</p>

<pre><code>-- Build times ----------
Target all_product_build
Start 2012-02-09 10:38:39
End   2012-02-09 11:14:37
00:01:41 corba
00:06:19 hotspot
00:15:49 jaxp
00:01:30 jaxws
00:10:03 jdk
00:00:36 langtools
00:35:58 TOTAL
</code></pre>

<p>编译完成后，编译结果维语build/linux-amd64目录下，可以写个简单的Java程序测试编译结果</p>

<p>Test.java</p>

<pre><code>public class Test{
        public static void main(String[] args){
                System.out.println("Hello");
        }
}
</code></pre>

<p>编译</p>

<pre><code>[root@localhost openjdk]# ./build/linux-amd64/bin/java Test.java
</code></pre>

<p>执行</p>

<pre><code>[root@localhost openjdk]# ./build/linux-amd64/bin/java Test
Hello
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用ruby获取本机IP&发送給Gtalk]]></title>
    <link href="http://jiangbo.me/blog/2012/01/04/how-to-get-ip-and-send-to-gtalk-by-ruby/"/>
    <updated>2012-01-04T17:35:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/01/04/how-to-get-ip-and-send-to-gtalk-by-ruby</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>有一台server用的是动态ip，每次重启后ip地址就变了，因此写了一个脚本，每次在server重启后，自动将ip发送到我的gtalk上。</p>

<h3>解决</h3>

<h4>如何获取本机IP</h4>

<p>用ruby获取本机的动态ip，网上很多教程都用</p>

<pre><code>require 'socket'

IPSocket.getaddress(Socket.gethostname)
puts TCPSocket.gethostbyname(Socket.gethostname)
</code></pre>

<p>这个在mac下是正常的，但是在linux下就只能拿到127.0.0.1
在StackOverflow上有另一种解决方案</p>

<pre><code>require 'socket'

def local_ip
  orig, Socket.do_not_reverse_lookup = Socket.do_not_reverse_lookup, true  # turn off reverse DNS resolution temporarily

  UDPSocket.open do |s|
    s.connect '64.233.187.99', 1
    s.addr.last
  end
ensure
  Socket.do_not_reverse_lookup = rig
end
</code></pre>

<p>这段主要是通过开启一个UDP链接来获取本地对外ip，因为UDP是无状态，所以不会实际建立网络链接，但是会获取本机对外ip。</p>

<h4>如何发送消息</h4>

<p>获取ip后需要通过gtalk发送，gtalk使用的是xmpp协议，ruby中协议有多种开源实现，比较简单通用的是xmpp4r，详细教程请看这里
首先需要安装xmpp4r-simple</p>

<pre><code>gem install xmpp4r-simple
</code></pre>

<p>注意，貌似这个gem不支持1.9.*，所以使用之前先将ruby切换到1.8.7版本
然后编写代码，主要两步：</p>

<ul>
<li>建立链接</li>
<li>发送消息</li>
</ul>


<p>代码如下：</p>

<pre><code> require 'rubygems'
 require 'xmpp4r-simple'  

 username = gmailusername
 password = gmailpassword
 to_username = destination_gmailusername  

 puts "Connecting to jabber server.."
 jabber = Jabber::Simple.new(username+'@gmail.com',password)
 puts "Connected."
 jabber.deliver(to_username+"@gmail.com", "Hello..!")
 sleep(1)
</code></pre>

<p>注意，最后那个sleep不能少，尽管我还不知道为啥:(</p>

<p>如此以来整个的获取ip，发送給gtalk的脚本为：</p>

<pre><code>require 'rubygems'
require 'socket'
require 'xmpp4r-simple'

def local_ip
  orig, Socket.do_not_reverse_lookup = Socket.do_not_reverse_lookup, true  # turn off reverse DNS resolution temporarily

  UDPSocket.open do |s|
    s.connect '64.233.187.99', 1
    s.addr.last
  end
ensure
  Socket.do_not_reverse_lookup = orig
end

jabber = Jabber::Simple.new('gmailuseanme@gmail.com','password')
jabber.deliver('destusenam@gmail.com', local_ip)
sleep 1
</code></pre>

<h4>设置自动运行</h4>

<p>linux设置自动运行是老生常谈了，在/etc/rc.local加上一句运行脚本的命令即可：</p>

<pre><code>ruby /home/jiangbo/ruby/getIP.rb
</code></pre>

<h3>结尾</h3>

<p>这样每次机器重启时，就能够通过gtalk获取到ip了，不过还遗留一个问题，就是在机器重启时，必须保证接收消息的gtalk在线，因为这种方式的消息gtalk不会自动重法，目前不知怎么解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2011&2012]]></title>
    <link href="http://jiangbo.me/blog/2011/12/31/my2011and2012/"/>
    <updated>2011-12-31T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/12/31/my2011and2012</id>
    <content type="html"><![CDATA[<p>一眨眼，一年又过去了，奔三的步伐又向前迈进了一步…</p>

<p><h2>2011流水账</h2></p>

<p>1月～3月，入职来第一次正是参加了大项目，中间夹杂个春节，据说每年年底做大项目是部门的传统，今年也不例外啊:(，项目苦了写，不过学了不少</p>

<p><p>4月～6月，公司进行服务化改造，作为主力开发参与了部门的服务化建设，期间送走了两个同事好友，一个去了厦门，一个回了宁波，各自寻找自己的幸福去了。<br />
附加一句，上半年基本还处在阴霾期，期间养成了去酒吧喝酒的习惯，有钱去酒吧，没钱去地摊，酒量现在还可以。</p></p>

<p>7月～8月，参加了另外一个项目，8月底的时候由于上半年持续表现不错，连续两个3.75，所以被升了一级，薪水也有了不错的涨幅:)。同时部门也组织了一次outing，去了舟山嵊泗岛，很祥和的小渔村，很不错。中间的时候李辉来杭州玩，许久不见的兄弟啊</p>

<p>9月第一次自己带了一个小项目。同时又送走一位同事。</p>

<p>十一期间，休了半个月的假，和同事几人一起去了趟西藏，花光了半年多的积蓄，感觉无法用语言形容，还会再去的，一定</p>

<p>11月～12月，需求不断，每日都投入在工作中，有些疲惫哈</p>

<p><h2>2011总结</h2></p>

<p>回顾下11年初定的三个目标：</p>

<p><em>1. 工作顺利挺进，争取升一级</em></p>

<p><em>2. 保养皮肤，争取帅一点</em></p>

<p><em>3. 去西藏，无论如何，我一定会去的</em></p>

<p><p>第一点顺利完成；第二点除了痘少些，人也老些，基本没变；第三点纠结许久也顺利完成，而且收获远超期望。<br />
除了以上三点，还有些额外收获，譬如结束单身生活啥的:)，老家盖新房啥的<br />
总的来说11年过的还算不错，基本算是从阴霾走向光明，逐渐奔向幸福，哈哈</p></p>

<p><h2>2012的三件事</h2></p>

<p>按照惯例，还是列下明年的目标把，不多，还是三个：</p>

<p><ol>
<li>自己做个网站</li>
<li>再一次长途旅行（环青海湖或这挺进新疆，诚征驴友）</li>
<li>还有一个很重要的事，一时想不起来了，暂定“顺利度过2012吧！”</li>
</ol></p>

<p><h2>祝福</h2></p>

<p>还是按照惯例，最后送上祝福：</p>

<p><p>亲们，尽管我这个人平时很少和大家联系，但我内心真的很想念你们，大家都要幸福啊！<br />
2012，幸福快乐！</p>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优化rails new时bundle install速度]]></title>
    <link href="http://jiangbo.me/blog/2011/12/17/rails_new_optimize_bundle_install/"/>
    <updated>2011-12-17T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/12/17/rails_new_optimize_bundle_install</id>
    <content type="html"><![CDATA[<p>最近痴迷ruby和ror，但是每次rails new xxx时总会在bundle install 停留很久，学习了下，发现rails new时会进行bundle install，自动到rubygems.org上检查是否有更新。如果确定不需要更新，事实上是可以跳过这个步骤的，方法很简单：
<code>
rails new my_app --skip-bundle
</code>
另外在单独执行bundle install时默认也会自动检查所有更新，解决方法时
<code>
bundle insall --local
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails中常见的错误]]></title>
    <link href="http://jiangbo.me/blog/2011/12/17/rails-common-error/"/>
    <updated>2011-12-17T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/12/17/rails-common-error</id>
    <content type="html"><![CDATA[<p><h1>Rails中常见错误总结</h1>
<h3>NoMothedError</h3>
NoMethodError通常表示引用了错误的方法，比如link_to写成了lunk_to。根据页面上的错误提示很容易能够定位到错误代码位于哪一行。
<h3>NameError</h3>
NameError常见于引用了错误的变量，比如变量不存在等
<h3>SyntaxError: unexpected $end</h3>
SyntaxError加上unexpected $end, expected keyword_end的错误，通常是少了end关键字。def和do必须要有对应的end。不过通常错误提示无法定位具体哪一行缺少了end，需要自己审查代码逻辑。
<h3>invalid multibyte char(US-ASCII)</h3>
如果使用的是Ruby1.9，出现:invalid multibyte char(US-ASCII)的时候，通常表示代码源文件中有UTF-8字符，比如中文，根据Ruby1.9规范，必须在源文件的头部加上编码注解<br />
#encoding: utf-8<br />
并且代码的源文件格式必须时utf-8的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome中清除dns缓存]]></title>
    <link href="http://jiangbo.me/blog/2011/12/07/clean-dns-cache-on-chrome/"/>
    <updated>2011-12-07T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/12/07/clean-dns-cache-on-chrome</id>
    <content type="html"><![CDATA[<p>web开发经常要做各种host绑定的切换，firefox下有个DNS Flusher插件，但没有chrome版本，其实在chrome下清除DNS缓存非常简单：<br />
1、用chrome打开：chrome://net-internals/#dns<br />
2、点击上面的“clean host cache”<br />
为了方便使用，可以加个bookmark:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上制作Ubuntu USB启动盘]]></title>
    <link href="http://jiangbo.me/blog/2011/11/09/create_ubuntu_usb_startdisk_on_mac/"/>
    <updated>2011-11-09T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/11/09/create_ubuntu_usb_startdisk_on_mac</id>
    <content type="html"><![CDATA[<p><strong>Mac上制作Ubuntu USB启动盘</strong></p>

<p><strong>一、下载ubuntu iso镜像</strong></p>

<p><strong>二、将iso转换为img文件</strong></p>

<p>$ hdiutil convert -format UDRW -o /path/to/generate/img/file /path/to/your/iso/file</p>

<p>该命令会生成一个.img的磁盘镜像文件，但是mac osx会默认追加一个.dmg，即生成的文件后缀是.img.dmg，这个后缀没关系，可以忽略</p>

<p><strong>三、查看USB的盘符</strong></p>

<p>$ diskutil list</p>

<p>/dev/disk0</p>

<p>#:                       TYPE NAME                    SIZE       IDENTIFIER</p>

<p>0:      GUID_partition_scheme                        *250.1 GB   disk0</p>

<p>1:                        EFI                         209.7 MB   disk0s1</p>

<p>2:                  Apple_HFS Macintosh HD            249.2 GB   disk0s2</p>

<p>3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3</p>

<p>/dev/disk1</p>

<p>#:                       TYPE NAME                    SIZE       IDENTIFIER</p>

<p>0:     FDisk_partition_scheme                        *4.0 GB     disk1</p>

<p>1:                 DOS_FAT_32 UNTITLED                4.0 GB     disk1s1</p>

<p>该命令查看当前系统上挂载的磁盘，其中/dev/disk1是我的USB磁盘。不同的系统disk后的数字可能不一样，但一般都是diskN的模式</p>

<p><strong>四、卸载USB磁盘</strong></p>

<p>$ diskutil unmountDisk /dev/disk1</p>

<p>Unmount of all volumes on disk1 was successful</p>

<p>使用diskutil unmountDisk卸载USB磁盘，注意卸载（umount）与弹出(eject)的区别:)</p>

<p><strong>五、将镜像写入USB</strong></p>

<p>$ sudo dd if=ubuntu.img.dmg of=/dev/rdisk1 bs=1m</p>

<p>将第二步生成的img文件写入到USB磁盘/dev/rdisk1。</p>

<p><strong>六、弹出USB</strong></p>

<p>$ diskutil eject /dev/disk1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim支持GBK编码]]></title>
    <link href="http://jiangbo.me/blog/2011/09/08/vim_gbk/"/>
    <updated>2011-09-08T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/09/08/vim_gbk</id>
    <content type="html"><![CDATA[<p><h2><strong>一、让ubuntu支持GBK编码</strong></h2>
Ubuntu默认对中文只支持UTF-8编码，可以通过一些修改让Ubuntu支持GBK编码。</p>

<p>首先用gedit /var/lib/locales/supported.d/local来修改 /var/lib/locales/supported.d/local文件，在文件中添加如下内容：<br />
zh_CN.UTF- 8 UTF- 8<br />
en_US.UTF- 8 UTF- 8<br />
zh_CN.GBK GBK<br />
zh_CN.GB2312 GB2312<br />
接着用sudo dpkg-reconfigure &#8211;force locales强制更新设置
<h2><strong>二、设置Vimrc支持GBK</strong></h2>
set fileencodings=utf-8,gbk,gb2312</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Velocity源码分析（二）——渲染执行之Introspection]]></title>
    <link href="http://jiangbo.me/blog/2011/08/26/velocity_introspection/"/>
    <updated>2011-08-26T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/08/26/velocity_introspection</id>
    <content type="html"><![CDATA[<p><div><span style="font-size: large;"><strong>一、何为Introspection</strong></span></div>
<div><span style="font-size: large;"><strong>
</strong></span></div>
<div>Instrospection（自省，xing，“吾日三省吾身”的“省”）源自哲学术语，指的是一种自我检视的精神行为。</div>
<div><em>Introspection is the self-observation and reporting of conscious inner thoughts, desires and sensations. It is a conscious and purposive process relying on thinking, reasoning, and examining one&#8217;s own thoughts, feelings, and, in more spiritual cases, one&#8217;s soul. </em></div>
<div style="text-align: right;">——Wikipedia</div>
<div>在计算机科学中，借用了哲学中的Introspeciton术语，表示一种能够识别一个事物它是什么，知道什么，能做什么的能力。典型的应用场景是面向对象语言中的类型自省（type introspeciton）。</div>
<div><em>In computing, type introspection is a capability of some object-oriented programming languages to determine the type of an object at runtime.</em></div>
<div style="text-align: right;">——Wikipedia</div>
<div>以Java为例，Java提供了可以在运行时获取和检查JavaBean的接口API，实例如下：</div>
<pre class="brush:java">import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
public class SimpleBean{
    private final String name = "SimpleBean";
    private int size;
    public String getName(){
        return this.name;
    }
    public int getSize(){
            return this.size;
    }
    public void setSize( int size ) {
        this.size = size;
    }
    public static void main( String[] args )            throws IntrospectionException   {
        BeanInfo info = Introspector.getBeanInfo( SimpleBean.class );
for ( PropertyDescriptor pd : info.getPropertyDescriptors() )             System.out.println( pd.getName() );
}
}</pre>
<div>Introspector.getBeanInfo(SimpleBean.class)是Java提供的一个自省工具类，可以在运行时获取SimpleBean类的类型信息BeanInfo，包括属性名、方法名、Bean描述等等信息。</div>
<div>查阅资料过程中发现有些人认为自省即反射（Reflection），反射即自省，因为Java中自省是通过反射实现的。我认为这两个概念还是有区别的，自省是一个目的或者说机制，是一个上层的接口封装，而反射是达到这个目的或者实现这个机制的方法，是底层的具体实现。</div>
<div><span style="font-size: large;"><strong>二、Velocity中的渲染执行</strong></span></div>
<div><span style="font-size: large;"><strong>
</strong></span></div>
<div><span style="font-size: medium;"><strong>2.1 velocity中Introspection概述</strong></span></div>
<div><span style="font-size: medium;"><strong>
</strong></span></div>
<div>Velocity作为一种模板语言允许我们向Context中放置一些JavaBean实例，并在模板中通过变量方式引用。如下所示：</div>
<div>Welcome! ${person.name} !</div>
<div>该模板中有一个引用变量${person.name}，在执行渲染时必须要知道person是个什么东东，person.name又是个什么东东，这里就需要自省机制发挥作用。</div>
<div>Veloctiy的的自省机制实现位于源码包org.apache.velocity.util.introspection中，其主要类图结构如下：</div>
<div><a href="http://jiangbo.me/images/uploads/2011/08/class-structure.png"><img class="aligncenter size-full wp-image-63" title="class-structure.png" src="http://jiangbo.me/images/uploads/2011/08/class-structure.png" alt="" width="863" height="351" /></a></div>
<div>Uberspect中定义了渲染执行时所需的主要接口。该接口主要提供四个方法：</div>
<div>
<ol>
	<li>getIterator()：支持迭代#foreache</li>
	<li>getMethod()：支持方法调用</li>
	<li>getPropertyGet()：支持获取属性值</li>
	<li>getPropertySet()：支持设置属性值</li>
</ol>
Uberspect有个默认的实现UberspectImpl，该实现使用默认的Introspector完成基本的自省功能。Introspector扩展自基类IntrospectorBase，增添异常日志功能。</div></p>

<p>
<div>IntrospectorBase内部维护了一个introspectCache，用于缓存已经完成自省的类和方法信息。</div>
<div>IntrospectorCacheImpl内通过一个HashMap维护一个class与其对应的类型信息，类型信息用一个ClassMap表示。</div>
<div>一个ClassMap内部维护了一个MethodCache，用于缓存该类已经解析出得方法信息。</div>
<div>MethodMap表示一个方法信息。</div>
<div><span style="font-size: medium;"><strong>2.2 渲染执行详细流程</strong></span></div>
<div><span style="font-size: medium;"><strong>
</strong></span></div>
<div>下面一如下模板为例，解释velocity中introspection的实际执行：</div>
<div>template.vm</div>
<div>${person.sayHi()}! I&#8217;m ${person.name}</div>
<div>该模板的作用表示分别调用context中名为person的对象的sayHi()方法和name属性。该模板经过语法解析生成的AST如下（关于AST解析请参考上一篇velocity源码分析）：</div>
<div><a href="http://jiangbo.me/images/uploads/2011/08/syntax-tree.png"><img class="aligncenter size-full wp-image-64" title="syntax-tree.png" src="http://jiangbo.me/images/uploads/2011/08/syntax-tree.png" alt="" width="483" height="185" /></a></div>
<div>图1.语法解析后的AST</div>
<div>${person.say()}被解析为一个拥有AST子节点的ASTReference节点，”! I’m”为一个ASTText节点，$person.name被解析为一个拥有ASTIdentifier子节点的ASTReference节点，”。”被解析为一个ASTText节点。</div>
<div>引擎从根节点开始执行渲染ASTprocess的render方法主要是遍历子节点，依次执行子节点的渲染方法。</div>
<div>ASTReference.render()方法主要调用其内部的execute（）方法获取实际的引用值，execute代码如下：</div>
<pre class="brush:java">    public Object execute(Object o, InternalContextAdapter context)
        throws MethodInvocationException
    {</pre></p>

<p>        if (referenceType == RUNT)<br />
            return null;<br />
        Object result = getVariableValue(context, rootString);</p>

<p>        if (result == null &amp;&amp; !strictRef)<br />
        {<br />
            return EventHandlerUtil.invalidGetMethod(rsvc, context,<br />
                    &#8220;$&#8221; + rootString, null, null, uberInfo);<br />
        }</p>

<p>        try<br />
        {<br />
            Object previousResult = result;<br />
            int failedChild = -1;<br />
            for (int i = 0; i &lt; numChildren; i++)<br />
            {<br />
                if (strictRef &amp;&amp; result == null)<br />
                {<br />
                    String name = jjtGetChild(i).getFirstToken().image;<br />
                    throw new VelocityException(&#8220;Attempted to access &#8216;&#8221;<br />
                        + name + &#8220;&#8217; on a null value at &#8221;<br />
                        + Log.formatFileString(uberInfo.getTemplateName(),<br />
                        + jjtGetChild(i).getLine(), jjtGetChild(i).getColumn()));<br />
                }<br />
                previousResult = result;<br />
                //遍历执行子节点的execute方法<br />
                result = jjtGetChild(i).execute(result,context);<br />
                if (result == null &amp;&amp; !strictRef)  // If strict and null then well catch this<br />
                                                   // next time through the loop<br />
                {<br />
                    failedChild = i;<br />
                    break;<br />
                }<br />
            }</p>

<p>            /**<br />
            &#8230;&#8230;<br />
            */<br />
    }
<div>1.execute方法先根据对象的名字从context中获取对象实例。</div>
<div>2.遍历所有子节点，执行子节点的execute方法。</div>
<div><strong><span style="font-size: small;">2.2.1 ASTMethod节点渲染</span></strong></div>
<div>ASTMethod的execute方法中关键代码如下：</div>
<div>
<pre class="brush:java">    public Object execute(Object o, InternalContextAdapter context)
        throws MethodInvocationException
    {
        if (o instanceof NullInstance &amp;&amp; ((NullInstance) o).isNotNull()) {
            return o;
        }</pre></div></p>

<p>        /*<br />
         *  获取方法信息<br />
         */</p>

<p>        VelMethod method = null;</p>

<p>        Object [] params = new Object[paramCount];</p>

<p>        try<br />
        {<br />
            // 计算参数类型<br />
            final Class[] paramClasses = paramCount &gt; 0 ? new Class[paramCount] : ArrayUtils.EMPTY_CLASS_ARRAY;</p>

<p>            for (int j = 0; j &lt; paramCount; j++)<br />
            {<br />
                params[j] = jjtGetChild(j + 1).value(context);</p>

<p>                if (params[j] != null)<br />
                {<br />
                    paramClasses[j] = params[j].getClass();<br />
                }<br />
            }</p>

<p>             //从cache中获取Method信息<br />
            MethodCacheKey mck = new MethodCacheKey(methodName, paramClasses);<br />
            IntrospectionCacheData icd =  context.icacheGet( mck );</p>

<p>            if ( icd != null &amp;&amp; (o != null &amp;&amp; icd.contextData == o.getClass()) )<br />
            {<br />
                method = (VelMethod) icd.thingy;<br />
            }<br />
            else<br />
            {<br />
                //缓存未命中，调用UberIntrospectImpl.getMethod()执行自省<br />
                method = rsvc.getUberspect().getMethod(o, methodName, params, new Info(getTemplateName(), getLine(), getColumn()));</p>

<p>                if ((method != null) &amp;&amp; (o != null))<br />
                {<br />
                    icd = new IntrospectionCacheData();<br />
                    icd.contextData = o.getClass();<br />
                    icd.thingy = method;<br />
                    //更新缓存<br />
                    context.icachePut( mck, icd );<br />
                }<br />
            }</p>

<p>            if (typeOptimum &amp;&amp; method instanceof VelMethodImpl) {<br />
                this.recordedData = icd;<br />
            }</p>

<p>            /*<br />
             *  &#8230;.<br />
             */<br />
    }

<div>1.首先从IntrospectionCache中查找已经缓存的自省结果信息</div>
<div>2.如果未找到，则使用uberspector进行自省，获取方法信息，并缓存自省结果。</div>
<div>3.调用自省返回的VelMethod的invoke方法，获取执行结果。</div>
<div>其中，获取方法信息的过程</div>
<div>method = rsvc.getUberspect().getMethod(o, methodName, params, new Info(getTemplateName(), getLine(), getColumn()));</div>
<div>实际调用就是UberspectImpl.getMethod()方法，该方法执行流程如下：</div>
<div>
<pre class="brush:java">    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i)
            throws Exception
    {
        if (obj == null)
        {
            return null;
        }
        //调用Inspector.getMethod()
        Method m = introspector.getMethod(obj.getClass(), methodName, args);
        if (m != null)
        {</pre>
<pre class="brush:java">            //封装VelMethodImpl
            return new VelMethodImpl(m);
        }</pre></div></p>

<p>        Class cls = obj.getClass();<br />
        // if it&#8217;s an array<br />
        if (cls.isArray())<br />
        {<br />
            // check for support via our array-&gt;list wrapper<br />
            m = introspector.getMethod(ArrayListWrapper.class, methodName, args);<br />
            if (m != null)<br />
            {<br />
                // and create a method that knows to wrap the value<br />
                // before invoking the method<br />
                return new VelMethodImpl(m, true);<br />
            }<br />
        }<br />
        // watch for classes, to allow calling their static methods (VELOCITY-102)<br />
        else if (cls == Class.class)<br />
        {<br />
            m = introspector.getMethod((Class)obj, methodName, args);<br />
            if (m != null)<br />
            {<br />
                return new VelMethodImpl(m);<br />
            }<br />
        }<br />
        return null;<br />
    }

<div>该方式实际调用Introspector.getMethod()方法。</div>
<div>
<pre class="brush:java">    public Method getMethod(final Class c, final String name, final Object[] params)
        throws IllegalArgumentException
    {
        try
        {
            //调用父类IntrospectorBase.getMethod()方法
            return super.getMethod(c, name, params);
        }
        catch(MethodMap.AmbiguousException ae)
        {
           /*异常处理*/
        }</pre></div></p>

<p>        return null;<br />
    }

<div>Introspector.getMethod()实际只是扩展了其父类的getMethod方法，增加了异常日志功能。</div>
<div>IntrospectorBase.getMethod()代码如下：</div>
<div>
<pre class="brush:java">    public Method getMethod(final Class c, final String name, final Object[] params)
            throws IllegalArgumentException,MethodMap.AmbiguousException
    {
        if (c == null)
        {
            throw new IllegalArgumentException ("class object is null!");
        }
        
        if (params == null)
        {
            throw new IllegalArgumentException("params object is null!");
        }</pre></div></p>

<p>        IntrospectorCache ic = getIntrospectorCache();</p>

<p>        ClassMap classMap = ic.get(c);<br />
        if (classMap == null)<br />
        {<br />
            classMap = ic.put(c);<br />
        }</p>

<p>        return classMap.findMethod(name, params);<br />
    }

<div>该方法首先获取从IntrospectorCache中获取表示类信息的classMap，如果没找到则在cache中put该类型信息。有意思的是这里没有常见的缓存未命中直接查询的过程，而是直接更新缓存，也就意味着put方法里有构造类型信息的过程。</div>
<div>IntrospectorCache.put()代码如下</div>
<div>
<pre class="brush:java">    public ClassMap put(final Class c)
    {
        //构造ClassMap
        final ClassMap classMap = new ClassMap(c, log);
        synchronized (classMapCache)
        {
            classMapCache.put(c, classMap);
            classNameCache.add(c.getName());
        }
        return classMap;
    }</pre>
</div>
<div>put方法首先构造一个ClassMap，然后更新classMapCache。</div>
<div>构造ClassMap的过程如下：</div>
<div>
<pre class="brush:java">    public ClassMap(final Class clazz, final Log log)
    {
        this.clazz = clazz;
        this.log = log;</pre></div></p>

<p>        if (debugReflection &amp;&amp; log.isDebugEnabled())<br />
        {<br />
            log.debug(&#8220;=================================================================&#8221;);<br />
            log.debug(&#8220;== Class: &#8221; + clazz);<br />
        }</p>

<p>        methodCache = createMethodCache();</p>

<p>        if (debugReflection &amp;&amp; log.isDebugEnabled())<br />
        {<br />
            log.debug(&#8220;=================================================================&#8221;);<br />
        }<br />
    }

<div>关键是构造一个MethodCache，createMethodCache过程如下：</div>
<div>
<pre class="brush:java">    private MethodCache createMethodCache()
    {
        MethodCache methodCache = new MethodCache(log);
        for (Class classToReflect = getCachedClass(); classToReflect != null ; classToReflect = classToReflect.getSuperclass())
        {
            if (Modifier.isPublic(classToReflect.getModifiers()))
            {
                populateMethodCacheWith(methodCache, classToReflect);
            }
            Class [] interfaces = classToReflect.getInterfaces();
            for (int i = 0; i &lt; interfaces.length; i++)
            {
                populateMethodCacheWithInterface(methodCache, interfaces[i]);
            }
        }
        // return the already initialized cache
        return methodCache;
    }</pre>
</div>
<div>createMethodCache()首先构造一个MethodCache实例，然后通过反射获得类型的public方法信息，并递归的获取其实现的接口方法信息。</div>
<div>IntrospectorBase.getMethod()方法获取到该ClassMap后，通过classMap.getMethod()返回一个需要的method，由于多态的存在，一个类会有多个同名方法，所以getMethod()过程中有一个根据参数类型寻找最佳匹配的方法getBestMatch（）这里有个循环遍历所有方法，并且比较所有参数类型的过程，而且这个过程在每次模板渲染执行时都会进行，代价很高，因此尽量少在放入模板的类中写多态方法有助提高渲染执行性能。</div>
<div>至此一个ClassMap构造完毕，即一个类的自省过程完成。UberinspectorImpl成功的拿到了需要的方法信息，然后将Method封装VelMethodImpl返回。</div>
<div>ASTMethod节点执行渲染时调用invoke方法实际调用的就是Method.invoke()，获得方法执行结果写入输出流中，完成渲染。</div>
<div><strong><span style="font-size: small;">2.2.2 ASTIdentifier节点渲染</span></strong></div>
<div>ASTIdentifier的execute方法中关键代码如下</div>
<div>（TODO：ASTIndentifier.execute()代码）</div>
<div>1.从IntrospectionCache中查找已经缓存的信息。</div>
<div>2.如果缓存未命中，使用uberspector进行自省，并缓存自省结果</div>
<div>3.调用自省的返回的VelPropertyGet的invoke方法，反射执行起get方法。</div>
<div>
<div>UberspectImpl.getPropertyGet()方法关键代码如下：</div>
<div>
<pre class="brush:java">    public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i)
            throws Exception
    {
        if (obj == null)
        {
            return null;
        }</pre></div></div></p>

<p>        Class claz = obj.getClass();</p>

<p>         // 构造get&#8221;属性名&#8221;()形式的Executor<br />
        AbstractExecutor executor = new PropertyExecutor(log, introspector, claz, identifier);</p>

<p>        //构造一个Map形式的Executor<br />
        if (!executor.isAlive())<br />
        {<br />
            executor = new MapGetExecutor(log, claz, identifier);<br />
        }</p>

<p>        // 构造get(&#8220;属性名&#8221;)形式的Executor</p>

<p>        if (!executor.isAlive())<br />
        {<br />
            executor = new GetExecutor(log, introspector, claz, identifier);<br />
        }<br />
        //构建is&#8221;属性名&#8221;形式的executor<br />
        if (!executor.isAlive())<br />
        {<br />
            executor = new BooleanPropertyExecutor(log, introspector, claz,<br />
                                                   identifier);<br />
        }</p>

<p>        return (executor.isAlive()) ? new VelGetterImpl(executor) : null;<br />
    }

<div>1.首先根据对象的class类型和属性名构造一个get”属性名”的方法的PropertyExecutor。</div>
<div>2.如果未找到get”属性名”的方法，则尝试构造一个Map.key形式的MapGetExecutor。</div>
<div>3.如果也不是Map.key形式，尝试构造一个get(“属性名”)的GetExecutor。</div>
<div>4.如果还没找到，则尝试构造一is”属性名”形式的BooleanPropertyExecutor。</div>
<div>5.最终返回一个封装了Executor的VelGetImpl，如果未找到则返回null。</div>
<div>所有的Executor均扩展自AbstractExecutor，VelGetImpl通过内置一个executor执行方法调用。Executor类图关系如下</div>
<div><a href="http://jiangbo.me/images/uploads/2011/08/Excuter-class-structure.png"><img class="aligncenter size-full wp-image-76" title="Executor类图结构" src="http://jiangbo.me/images/uploads/2011/08/Excuter-class-structure.png" alt="" width="682" height="380" /></a></div>
<div>Executor实现中除MapGetExecutor外，其余的Executor均通过内置一个introspector实现方法的构建，过程与上述ASTMethod节点渲染过程中introspector.getMethod()一致，只是方法名做了封装，如GetExecutor的方法名为get， PropertyExecutor的方法名为get”属性名”， BooleanPropertyExecutor方法名为is”属性名”，具体构建流程不再赘述。</div>
<div>最终，ASTIndentifier.execute()方法通过UberInspectImpl.getPropertyGet()获得VelGetImpl，并调用VelGetImpl.invoke()获取方法执行的结果，写入输出流，完成渲染。</div>
<div>UberInspectImpl.getPropertySet()的执行过程于getPropertyGet()大体一致，区别在于获取的是VelSetImpl，内置了SetExecutor，SetExecutor有三个扩展对应为MapSetExecutor（Map.key=value形式），PutExecutor（put(key, value)形式），SetPropertyExecutor（set”属性名”(value)形式）。其内部同样使用introspector.getMethod()方法构建Method，通过反射执行设置属性值。</div>
<div><strong><span style="font-size: large;">三、总结</span></strong></div>
<div>总的来说，作为模板语言velocity提供了可用的自省机制完成模板中对象引用及方法执行的的渲染。并在自省过程中提供了有效的缓存机制用以提升自省效率。但每次依旧需要解析AST，反射执行引用节点的方法，效率方面似乎还有优化的余地。</div>
<div><strong><span style="font-size: large;">参考文档</span></strong></div>
<div>《Java Introspeciton》 http://download.oracle.com/javase/tutorial/javabeans/introspection/index.html</div>
<div>《Type Introspection》 http://en.wikipedia.org/wiki/Type_introspection</div>
<div>《Introspection》http://en.wikipedia.org/wiki/Introspection</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Velocity源码分析（一）——概述]]></title>
    <link href="http://jiangbo.me/blog/2011/08/19/velocity_overview/"/>
    <updated>2011-08-19T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/08/19/velocity_overview</id>
    <content type="html"><![CDATA[<p><h2>一、概述</h2>
Velocity模板引擎处理机制分为五个基本步骤：
<ol>
	<li>引擎初始化，通过设置的引擎属性初始化引擎，包括国际化支持，ResourceLoader设置，字符编码等。</li>
	<li>获取并解析模板文件，首先通过资源加载器（ResourceLoader）将模板文件加载到内存（转化为InputStream），然后通过AST（Abstract Syntax Tree）解析器将InputStream解析为一个AST。</li>
	<li>创建一个Context</li>
	<li>将模板渲染所需的参数放入context</li>
	<li>执行模板渲染，产生输出流。渲染过程中通过遍历该模板对应的AST，调用相应节点的处理器执行渲染。</li>
</ol>
整个处理流程如下图所示：</p>

<p><a href="http://jiangbo.me/images/uploads/2011/08/Velocity-process-structure.png"><img class="aligncenter size-full wp-image-59" title="Velocity处理流程" src="http://jiangbo.me/images/uploads/2011/08/Velocity-process-structure.png" alt="" width="619" height="407" /></a>
<h2>二、详细渲染流程</h2>
下面以一个简单的模板template.vm为例，详细解释渲染过程。<br />
VelocityMergeTest.java
<pre class="brush:java">public class VelocityMergeTest {</pre></p>

<p>public static void main(String[] args) {<br />
VelocityEngine ve = new VelocityEngine();<br />
ve.setProperty(Velocity.RESOURCE_LOADER, &#8220;class&#8221;);<br />
ve.setProperty(&#8220;class.resource.loader.class&#8221;,<br />
&#8220;org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader&#8221;);<br />
try {<br />
//引擎初始化<br />
ve.init();<br />
//加载解析模板<br />
Template tp = ve.getTemplate(&#8220;template.vm&#8221;);<br />
//创建context<br />
Context context = new VelocityContext();<br />
//设置Context中参数值<br />
context.put(&#8220;foo&#8221;, &#8220;VV&#8221;);<br />
StringWriter writer = new StringWriter();<br />
//执行渲染<br />
tp.merge(context, writer);<br />
System.out.println(writer.toString());<br />
} catch (Exception e) {<br />
}
}<br />
}
template.vm
<pre class="brush:xml">&lt;html&gt;
&lt;body&gt;
Hello $foo world!
&lt;/body&gt;
&lt;/html&gt;</pre>
<h3>1.引擎初始化</h3>
ve.setProperty(&#8220;class.resource.loader.class&#8221;,<br />
&#8220;org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader&#8221;);<br />
设置引擎的资源加载使用ClasspathResourceLoader。<br />
ve.init()执行引擎的初始化。
<h3>2.加载解析模板</h3>
当执行ve.getTemplate(&#8220;template.vm&#8221;)时，首先通过ResourceLoader将tempalte加载为InputStream，然后通过Parser生成如下Token集合：<br />
{[&lt;html&gt; &lt;body&gt; Hello], [$foo], [world! &lt;/body&gt; &lt;/html&gt; ]}，<br />
可以发现velocity根本不关系模板最终要渲染出来的是html还是什么的其他的东西，也就以为这所有的html标签对velocity来讲都是纯文本。<br />
最终构建的AST如下</p>

<p><a href="http://jiangbo.me/images/uploads/2011/08/AST.png"><img class="aligncenter size-full wp-image-60" title="AST" src="http://jiangbo.me/images/uploads/2011/08/AST.png" alt="" width="367" height="169" /></a></p>

<p>根节点下有三个子节点：
<ol>
	<li>[&lt;html&gt; &lt;body&gt; Hello]对应的ASTText节点；</li>
	<li>[$foo]对应的ASTReference节点；</li>
	<li>[world! &lt;/body&gt; &lt;/html&gt; ]对应的ASTText节点</li>
</ol>
Velocity引擎在这里有个优化策略，可以针对生成的语法树进行cache。
<h3>3.创建context并设置参数</h3>
Context context = new VelocityContext();<br />
context.put(&#8220;foo&#8221;, &#8220;VV&#8221;);<br />
创建一个context，并在其中放入一个foo=VV的参数。
<h3>4.执行渲染</h3>
当执行tp.merge(context, writer);时，模板遍历其对应的AST树，执行每个节点的渲染过程。如ASTText节点只是简单的将文本写入writer。ASTReference节点需要从context中获取引用的参数foo的值VV，将$foo替换，并写入到writer中。Velocity的AST中有多种节点，如ASTIdentitor等，有些需要反射机制处理。当整个AST遍历结束，也就意味着模板渲染结束，渲染的结果位于writer流中。
<h2>三、关于AST解析</h2>
Velocity作为模板语言，其核心在与模板文件的解析，构建AST。Velocity的解析器是通过JavaCC构建的，JavaCC（Java Complier Complier）是一个用于生成解析器的工具，可以根据语法定义（.jj文件）生成用于校验一份文本是否符合该语法定义的java代码。JJTree是JavaCC中提供的一种根据语法定义（.jjt文件）生成构建符合该语法定义的文本的语法树的java代码的工具。<br />
Velocity源码包中提供了用于构建velocity语法解析的的jjt文件，位于src/parser/Parser.jjt。可以自己手动从源码构建Velocity的解析器。步骤如下：<br />
1.下载安装JavaCC，到http://javacc.java.net/下载即可，velocity的解析器需要3.2版本以上。下载后解压即可。<br />
2.使用JJTree生成节点定义：<br />
$ javacc-5.0/bin/jjtree Parser.jjt<br />
这一过程中会生成节点定义的Java文件和Parser.jj语法定义文件<br />
3.使用JavaCC生成解析器<br />
$ javacc-5.0/bin/javacc Parser.jj<br />
最终会生成Parser.java解析器和个节点定义。
<h2>参考资料</h2>
《Velocity Developer Guide》<a href="http://velocity.apache.org/engine/devel/developer-guide.html">http://velocity.apache.org/engine/devel/developer-guide.html</a>
《JavaCC》<a href="http://javacc.java.net/">http://javacc.java.net/</a>
《Velocity源码分析》<a href="http://www.khotyn.com/2011/07/22/velocity_sourcecode/">http://www.khotyn.com/2011/07/22/velocity_sourcecode/</a>
《Velocity的一些优化记录》<a href="http://agapple.iteye.com/blog/1051724">http://agapple.iteye.com/blog/1051724</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webx3源码分析－容器结构]]></title>
    <link href="http://jiangbo.me/blog/2011/08/17/webx3-container-structure/"/>
    <updated>2011-08-17T19:32:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/08/17/webx3-container-structure</id>
    <content type="html"><![CDATA[<h3>一、Webx 框架概述</h3>

<p>Webx是一套基于Java Servlet API构建的通用Web框架。整个Webx框框架层次分为三层：</p>

<p><img src="http://jiangbo.me/images/webx/webx-framework-layer.png" alt="image" /></p>

<ol>
<li>SpringExt：提供了基于Spring的通用扩展机制</li>
<li>WebxFramework：基于Servlet API，提供Web基础服务，如Spring初始化，日志初始化，接受请求，错误处理，开发模式等。Webx Framework只是对Servlet和spring的基础封装，并不关心Web框架中具体服务的处理，如Action处理，表单处理等。因此，可以在Webx Framework上扩展多种风格的Web框架。</li>
<li>Webx Turbine：基于Webx Framework，提供具体的网页功能，如表单处理，Action相应处理等</li>
</ol>


<h3>二、Webx Framework容器结构</h3>

<h4>1.1组件化应用结构</h4>

<p>Webx Framework是基于组件化风格构建的，它将一个应用划分一个Webx应用包含至少一个组件组 (WebxComponents)，一个组件组由多个组件(WebxComponent)构成。</p>

<p><img src="http://jiangbo.me/images/webx/webx-component.png" alt="image" /></p>

<p>Webx Framework中定义了WebxComponents接口和WebxComponent接口，分别表示一组组件的信息和一个组件的描述。
组件化的应用结构反应在容器上即应用中级联的父子容器的结构关系，如下图所示：</p>

<p><img src="http://jiangbo.me/images/webx/webx-context-structure.png" alt="image" /></p>

<p>Webx Framework将一个Web应用分解成多个小应用模块：app1, app2，等。每个应用模块独享一个子容器（Sub Context），共享根容器（Root Context）。子容器之间的beans无法相互注入，但是所有小应用都共享一个Root Context。根容器的bean可以被注入到子容器的bean中；反之不可以。</p>

<h4>1.2 基于Spring的容器类扩展</h4>

<p>为实现上述应用组件化结构，Webx Framework在在Spring容器基础上按照组件化风格进行扩展：</p>

<p><img src="http://jiangbo.me/images/webx/webx-container.png" alt="image" /></p>

<p>com.alibaba.citrus.webx.context.XmlWebApplicationContext是Webx框架的从XML文件中装配的，用于Web应用环境的Application Context，扩展自Spring的org.springframework.web.context.support.XmlWebApplicationContext，主要扩展点如下：</p>

<ol>
<li>支持SpringExt的捐献(ConfigurationPoint)机制（SpringExt在后面文章中讲解）</li>
<li>实现了ResourceLoadingExtendable接口，扩展的resource loading机制。假如ResourceLoadingExtender 被设置，则使用它来装载资源，否则使用默认的装载器。</li>
<li>默认开启annotation config，相当于&lt;context:annotation-config/>。</li>
<li>假如parentResolvableDependenciesAccessible==true，则支持从parent context中取得预先置入resolvableDependencies中的对象。默认为true。</li>
</ol>


<p>ResourceLoadingXmlWebApplicationContext继承自XmlWebApplicationContext，扩展了从resource loading service中装载的功能。WebxApplicationContext是用于Webx框架的application context。直接继承自ResourceLoadingXmlWebApplicationContext，扩展了取得默认Spring配置的实现，默认Root容器的配置文件位于WEB-INF/webx.xml，子容器的配置文件位于WEB-INF/webx-<em>.xml（</em>代表component名）。由于继承关系，WebxApplicationContext继承了负累所有的特性，在原来Spring容器XmlWebApplicationContext基础之上扩展如下功能：</p>

<ol>
<li>支持SpringExt，包括configuration point和resource loading支持</li>
<li>定义默认容器配置文件位置</li>
</ol>


<p>WebxComponentsContext和WebxComponentContext直接扩展自WebxApplicationContext，分别对应为WebxComponents和WebxComponent的容器。</p>

<p>WebxComponentsContext中内置了一个WebxComponentsLoader用于装载Webx components，并且覆写了postProcessBeanFactory()处理定制BeanFactory，以及finishRefresh()处理子容器的刷新。</p>

<p>WebxComponentContext包含了对应的WebxComponent实例，并将其注入到容器中，即在一个WebxComponentContext中，引用的WebxComponent均是其对应的component实例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse中debug maven jetty应用]]></title>
    <link href="http://jiangbo.me/blog/2011/08/10/eclipse-debug-maven-jetty/"/>
    <updated>2011-08-10T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/08/10/eclipse-debug-maven-jetty</id>
    <content type="html"><![CDATA[<p>Maven和Jetty有很好的集成，可以方便的使用mvn jetty:run 启动一个web应用，但是默认的maven-jetty插件并没有开启debug模式，而日常开发中难免需要用IDE debug引用。下面描述下如何配置eclipse，使其可以进行maven-jetty项目的debug。
<h2> <span class="Apple-style-span" style="font-size: 26px; font-weight: bold;"><strong>1.首先设置启动方式。</strong></span></h2>
在Ecipse -&gt;Run-&gt;External Tools -&gt;External Tool Configuration&#8230;中打开配置窗口，选中Program节点，双击新建一个新的配置。</p>

<p>Name自定义，Main Tab下，Location设置为mvn命令的路径，Working Directory设置为需要进行debug的项目目录，Arguments设置为jetty:run</p>

<p><a href="http://jiangbo.me/images/uploads/2011/08/Run.png"><img class="aligncenter size-full wp-image-45" title="Run" src="http://jiangbo.me/images/uploads/2011/08/Run.png" alt="" width="702" height="664" /></a></p>

<p>在Envriroment Tab中新建一个环境变量MAVEN_OPTS，值为</p>

<p>-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8089,server=y,suspend=y</p>

<p><a href="http://jiangbo.me/images/uploads/2011/08/MAVEN_OPTS.png"><img class="aligncenter size-full wp-image-46" title="MAVEN_OPTS" src="http://jiangbo.me/images/uploads/2011/08/MAVEN_OPTS.png" alt="" width="702" height="664" /></a></p>

<p>点击Apply，保存配置；close，关闭窗口。
<h2>2.设置Debug信息</h2>
打开Eclipse-&gt;Run-&gt;Debug Configurations窗口，在左侧列表中选择新建一个 Remote Java Application配置。在Connect Tab下，Project设置为当前需要debug的项目，Host设置为localhost，端口为8089（上面MAVEN_OPTS里的address=8089）</p>

<p><a href="http://jiangbo.me/images/uploads/2011/08/debug.png"><img class="aligncenter size-full wp-image-47" title="debug" src="http://jiangbo.me/images/uploads/2011/08/debug.png" alt="" width="719" height="720" /></a></p>

<p>点击Apply，保存配置，close，关闭窗口</p>

<p>&nbsp;
<h2><strong>3.运行应用。</strong></h2>
Eclipse-&gt;Run-&gt;External Tools-&gt;Extrernal Tools Configurations，选择第一步设置的启动配置，执行Run，启动应用。Eclipse终端中会输出</p>

<p>Listening for transport dt_socket at address: 8089</p>

<p>表示应用启动监听debug端口8089</p>

<p>&nbsp;
<h2><strong>4.开启debug</strong></h2>
Eclipse-&gt;Run-&gt;Debug Configurations选择第二步设置的debug配置，启动debug</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac配置docbook工具链]]></title>
    <link href="http://jiangbo.me/blog/2011/08/09/mac-config-docbook-tool-chain/"/>
    <updated>2011-08-09T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/08/09/mac-config-docbook-tool-chain</id>
    <content type="html"><![CDATA[<p>docbook是一种在开源界极其流行的文档撰写格式，其源文件可以方便的转换为html，pdf等各种格式。
<strong>一、安装工具链</strong>
docbook工具链包含三部分<br />
1.xsltproc（mac自带）<br />
2.docbook-xsl（需要下载解压 wget http://downloads.sourceforge.net/project/docbook/docbook-xsl/1.76.1/docbook-xsl-1.76.1.tar.bz2）<br />
3.fop（到<a href="http://www.apache.org/dyn/closer.cgi/xmlgraphics/fop">http://www.apache.org/dyn/closer.cgi/xmlgraphics/fop</a>下载）<br />
下载解压后得到：<br />
docbook-xsl-1.76.1<br />
fop-1.0<br />
两个目录。<br />
此时可以已经可以进行docbook撰写了，不过只限英文:)
<strong>二、撰写docbook，并生成pdf</strong>
使用文本编辑器编写如下xml，保存为webx.xml
<pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</pre></p>

<p>&lt;!DOCTYPE book PUBLIC &#8220;-//OASIS//DTD DocBook XML V4.0//EN&#8221;  &#8220;http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd&#8221;&gt;</p>

<p>&lt;book&gt;<br />
&lt;bookinfo&gt;<br />
&lt;title&gt;Webx Source Code&lt;/title&gt;<br />
&lt;author&gt;<br />
&lt;firstname&gt;Bo&lt;/firstname&gt;<br />
&lt;surname&gt;Jiang&lt;/surname&gt;<br />
&lt;affiliation&gt;<br />
&lt;address&gt;<br />
&lt;email&gt;jiang.bo.hit@gmail.com&lt;/email&gt;<br />
&lt;/address&gt;<br />
&lt;/affiliation&gt;<br />
&lt;/author&gt;<br />
&lt;copyright&gt;<br />
&lt;year&gt;2011&lt;/year&gt;<br />
&lt;/copyright&gt;<br />
&lt;abstract&gt;<br />
&lt;para&gt;Webx&lt;/para&gt;<br />
&lt;/abstract&gt;<br />
&lt;/bookinfo&gt;<br />
&lt;part&gt;<br />
&lt;title&gt;Part1&lt;/title&gt;<br />
&lt;chapter&gt;<br />
&lt;title&gt;Chapter 1 &lt;/title&gt;<br />
&lt;sect1&gt;<br />
&lt;title&gt;Part1, Chapter 1, Section1&lt;/title&gt;<br />
&lt;para&gt;     Your Text &lt;/para&gt;<br />
&lt;/sect1&gt;<br />
&lt;/chapter&gt;<br />
&lt;chapter&gt;<br />
&lt;title&gt;Part 1, Chapter 2&lt;/title&gt;<br />
&lt;sect1&gt;<br />
&lt;title&gt;Part1, Chapter 2, Section 1&lt;/title&gt;<br />
&lt;para&gt;     Your Text &lt;/para&gt;<br />
&lt;/sect1&gt;<br />
&lt;/chapter&gt;<br />
&lt;/part&gt;<br />
&lt;/book&gt;
使用xsltproc转换为中间文件<br />
$xsltproc -o <a href="http://inter.fo/">inter.fo</a> ~/tools/docbook-xsl-1.76.1/fo/docbook.xsl webx.xml<br />
此时会生成中间文件inter.fo<br />
使用fop生成pdf<br />
$~/tools/fop-1.0/fop -pdf webx.pdf -fo <a href="http://inter.fo/">inter.fo</a>
最终生成了名为webx.pdf的pdf文件</p>

<p><strong>三、设置FOP支持中文</strong>
但是使用FOP默认的配置处理含有中文的文档是，中文都会变成### :(，原因是FOP默认不支持中文字体，需要自己配置一下。<br />
找到自己系统中的字体目录，Mac下为/Library/Fonts，里面存在Microsoft/SimHei.ttf字体文件，下面一该字体为例生成一个FOP字体矩阵配置。
<strong>1.生成字体矩阵</strong></p>

<p>进入到fop安装目录，执行</p>

<p>$ java -cp build/fop.jar:`echo lib/*.jar |tr &#8217; &#8217; &#8216;:&#8217;` org.apache.fop.fonts.apps.TTFReader -ttcanme &#8220;SimHei&#8221; /Library/Fonts/Microsoft/SimHei.ttf conf/simhei.xml</p>

<p>会在conf目录下生成simhei.xml字体矩阵文件</p>

<p><strong>2.修改fop配置文件conf/fop.xconf，加入如下配置</strong>
<pre class="brush:xml">&lt;renderer mime="application/pdf"&gt;</pre></p>

<p>&lt;filterList&gt;</p>

<p>……</p>

<p>&lt;/filterList&gt;</p>

<p>&lt;fonts&gt;</p>

<p>&lt;font metrics-url=&#8221;file:///Users/jiangbo/tools/fop-1.0/conf/simhei.xml&#8221; kerning=&#8221;yes&#8221; embed-url=&#8221;file:///Library/Fonts/Microsoft/SimHei.ttf&#8221;&gt;</p>

<p>&lt;font-triplet name=&#8221;SimHei&#8221; style=&#8221;normal&#8221; weight=&#8221;bold&#8221;/&gt;</p>

<p>&lt;font-triplet name=&#8221;SimHei&#8221; style=&#8221;normal&#8221; weight=&#8221;bold&#8221;/&gt;</p>

<p>&lt;/font&gt;</p>

<p>&lt;!&#8211;&lt;directory recursive=&#8221;true&#8221;&gt;/Library/Fonts/&lt;/directory&gt;&#8211;&gt;</p>

<p>&lt;!&#8211;    &lt;auto-detect/&gt;&#8211;&gt;</p>

<p>&lt;/fonts&gt;</p>

<p>……
<strong>3.撰写docbook样式表，docbook.xsl</strong></p>

<p>默认转换时使用的是docbook-xsl-1.76.1/fo/docbook.xsl样式表，该样式表中不包括中文字体，需要自定义一个样式表docbook.xsl
<pre class="brush:xml">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:exsl="http://exslt.org/common"
                xmlns:fo="http://www.w3.org/1999/XSL/Format"
                xmlns:ng="http://docbook.org/docbook-ng"
                xmlns:db="http://docbook.org/ns/docbook"
                exclude-result-prefixes="db ng exsl"
                version='1.0'&gt;</pre></p>

<p>&lt;xsl:import href=&#8221;/Users/jiangbo/tools/docbook-xsl-1.76.1/fo/docbook.xsl&#8221;/&gt;<br />
&lt;xsl:param name=&#8221;body.font.family&#8221;&gt;SimHei&lt;/xsl:param&gt;<br />
&lt;xsl:param name=&#8221;monospace.font.family&#8221;&gt;SimHei&lt;/xsl:param&gt;<br />
&lt;xsl:param name=&#8221;title.font.family&#8221;&gt;SimHei&lt;/xsl:param&gt;<br />
&lt;/xsl:stylesheet&gt;
<strong>4.使用新样式表进行转换</strong></p>

<p>$xsltproc -o <a href="http://inter.fo/">inter.fo</a> docbook.xsl webx.xml</p>

<p>$$ ~/tools/fop-1.0/fop -c  ~/tools/fop-1.0/conf/fop.xconf -pdf webx.pdf -fo <a href="http://inter.fo/">inter.fo</a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX 安装memcached]]></title>
    <link href="http://jiangbo.me/blog/2011/08/03/mac-osx-install-memcached/"/>
    <updated>2011-08-03T00:00:00+08:00</updated>
    <id>http://jiangbo.me/blog/2011/08/03/mac-osx-install-memcached</id>
    <content type="html"><![CDATA[<p>1.确保本机上已经装了Xcode，可以从随机附带的DVD中获取，或者到 Apple Developer Connection下载安装。2.从 shell script from topfunky.net (mirror) 下载安装脚本，该脚本会自动完成memcached的安装，包括相应的依赖包<br />
3.执行下载的脚本，
<pre class="brush:shell">$ chmod +x install-memcached.sh
$ sudo ./install-memchaced.sh</pre>
4.在环境变量里添加EVENT_NOKQUEUE=1<br />
5.验证是否成功， $memcached -h，应该产生帮助提示
<a href="http://jiangbo.me/images/uploads/2011/07/Screen-shot-2011-08-03-at-11.12.50-AM.png"><img class="aligncenter size-full wp-image-35" title="Screen shot 2011-08-03 at 11.12.50 AM" src="http://jiangbo.me/images/uploads/2011/07/Screen-shot-2011-08-03-at-11.12.50-AM.png" alt="" width="607" height="423" /></a>
6.启动memcached,
<pre class="brush:shell">$memcached -m 32 -p 11211 -d</pre>
参考文档<br />
http://www.lullabot.com/articles/setup-memcached-mamp-sandbox-environment</p>
]]></content>
  </entry>
  
</feed>
