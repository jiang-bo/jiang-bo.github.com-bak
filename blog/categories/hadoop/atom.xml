<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hadoop | 非纯种程序猿]]></title>
  <link href="http://jiangbo.me/blog/categories/hadoop/atom.xml" rel="self"/>
  <link href="http://jiangbo.me/"/>
  <updated>2013-01-16T16:07:56+08:00</updated>
  <id>http://jiangbo.me/</id>
  <author>
    <name><![CDATA[jiang-bo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HADOOP动态加载配置]]></title>
    <link href="http://jiangbo.me/blog/2013/01/16/hadoop-reconfigurable/"/>
    <updated>2013-01-16T15:01:00+08:00</updated>
    <id>http://jiangbo.me/blog/2013/01/16/hadoop-reconfigurable</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Hadoop集群运行过程中有时会需要对配置进行修改，而通常需要重启才能生效，如该HDFS Namenode的一个配置，需要重启NN才能生效。而对于规模较大的系统，重启的成本较高。<a href="https://issues.apache.org/jira/browse/HADOOP-7001">HADOOP-7001</a>引入了一个reconfigurable机制。简述如下：</p>

<p>HADOOP-7001提供了一个Reconfigure接口用于定义可动态配置的的行为。并提供了一个ReconfigurableBase抽象的基类实现。该基类有两个抽象方法，所有想要实现动态配置的节点，都需要实现这两个方法：</p>

<pre><code>//某个可以动态配置的属性变化时需要进行的处理
protected abstract void reconfigurePropertyImpl(String property, String newVal) 
    throws ReconfigurationException;

//定义该节点上所有可以进行动态配置的属性集合
public abstract Collection&lt;String&gt; getReconfigurableProperties();
</code></pre>

<p>为了便于完成配置项变更，HADOOP-7001还提供了一个ReconfigurationServlet工具便于从web端变更配置。使用时只需要将该servelt加入到相应节点的httpserver中，并在context中加入conf.servlet.reconfigurable.$P的参数，值为对应的Reconfigurable实现（一般为节点自身实现），其中$P表示的是ReconfigurationServlet在httpServer中对应的path。</p>

<h2>NameNode中的使用</h2>

<p><a href="https://issues.apache.org/jira/browse/HDFS-1477">HDFS-1477</a>中提供了NameNode Reconfigurable的实现。概要分析如下：</p>

<h3>1. 扩展ReconfigurableBase</h3>

<p>首先需要扩展Reconfigurable来使NameNode支持动态配置</p>

<pre><code>public class NameNode extends ReconfigurableBase implements ClientProtocol, 
    DatanodeProtocol,NamenodeProtocol, FSConstants {

      //。。。。
      //此处省略N多无关代码
      //        

      //实现当发生配置变更时Namenode的具体处理行为
      @Override
      public void reconfigurePropertyImpl(String property, String newVal) 
        throws ReconfigurationException {
        // just pass everything to the namesystem
        if (namesystem.isPropertyReconfigurable(property)) {
         namesystem.reconfigureProperty(property, newVal);
        } else if ("fs.trash.interval".equals(property)) {
          try {
            if (newVal == null) {
              // set to default
              trash.setDeleteInterval(60L * Trash.MSECS_PER_MINUTE);
            } else {
              trash.setDeleteInterval((long)(
                  Float.valueOf(newVal) * Trash.MSECS_PER_MINUTE));
            }
            LOG.info("RECONFIGURE* changed trash deletion interval to " +
                newVal);
          } catch (NumberFormatException e) {
            throw new ReconfigurationException(property, newVal,
                getConf().get(property));
          }
        } else {
          throw new ReconfigurationException(property, newVal,
                                             getConf().get(property));
        }
      }

      //设置NameNode上允许动态配置的属性值
      @Override
      public List&lt;String&gt; getReconfigurableProperties() {
        // only allow reconfiguration of namesystem's reconfigurable properties
        List&lt;String&gt; properties = namesystem.getReconfigurableProperties();
        properties.add("fs.trash.interval");
        return properties;
      }
</code></pre>

<h3>2. 在httpserver中配置ReconfigurationServlet</h3>

<p>为了便于配置，需要在httpserver中添加ReconfigurationServlet，具体代码如下</p>

<pre><code>private void startHttpServer(Configuration conf) throws IOException {

    //省略无关代码

    //设置context属性
    httpServer.setAttribute(ReconfigurationServlet.
                            CONF_SERVLET_RECONFIGURABLE_PREFIX +
                            CONF_SERVLET_PATH, NameNode.this);
    //添加servelt， path为nnconfchange
    httpServer.addServlet("nnconfchange", CONF_SERVLET_PATH,
                          ReconfigurationServlet.class);
    this.httpServer.start();

    // The web-server port can be ephemeral... ensure we have the correct info
    infoPort = this.httpServer.getPort();
    this.httpAddress = new InetSocketAddress(infoHost, infoPort);
    conf.set("dfs.http.address", infoHost + ":" + infoPort);
    LOG.info("Web-server up at: " + infoHost + ":" + infoPort);
  }
</code></pre>

<h3>3.具体使用</h3>

<p>可以通过web访问 http://hdfsnn:port/nnconfchange来查看配置项，通过http://hdfsnn:port/nnconfchange?property=newVal的方式提交新的配置项，如果配置项变更出错会返回500.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本地编译Hadoop小记]]></title>
    <link href="http://jiangbo.me/blog/2012/09/24/compile-hadoop/"/>
    <updated>2012-09-24T15:28:00+08:00</updated>
    <id>http://jiangbo.me/blog/2012/09/24/compile-hadoop</id>
    <content type="html"><![CDATA[<h2>Git源码</h2>

<pre><code>git clone git://git.apache.org/hadoop-common.git
</code></pre>

<p>视网速不通，略慢</p>

<h2>编译</h2>

<pre><code>cd hadoop-common
mvn install -DskipTests
</code></pre>

<p>抛异常：</p>

<pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.6:run (compile-proto) on project hadoop-common: An Ant BuildException has occured: exec returned: 127 -&gt; [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.6:run (compile-proto) on project hadoop-common: An Ant BuildException has occured: exec returned: 127
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
    at... 
    Caused by: /Users/Shared/Workspace/hadoop/hadoop-common/hadoop-common-project/hadoop-common/target/antrun/build-main.xml:23: exec returned: 127
    at org.apache.tools.ant.taskdefs.ExecTask.runExecute(ExecTask.java:650)
    at org.apache.tools.ant.taskdefs.ExecTask.runExec(ExecTask.java:676)
    at org.apache.tools.ant.taskdefs.ExecTask.execute(ExecTask.java:502)
    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    at sun.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
    ... 21 more
</code></pre>

<p>原因是缺少protocol buffer， 找不到protoc命令。</p>

<h3>安装protocol buffer</h3>

<pre><code>wget https://protobuf.googlecode.com/files/protobuf-2.4.1.tar.bz2
tar -xvf protobuf-2.4.1.tar.bz2
cd protobuf-2.4.1
./configure &amp;&amp; make
make install
</code></pre>

<h3>导入Eclipse</h3>

<pre><code>mvn eclipse:eclipse -DdownloadSources=true -DdownloadJavadocs=true
</code></pre>
]]></content>
  </entry>
  
</feed>
